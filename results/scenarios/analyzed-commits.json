[
    {
        "repo": "kismetwireless/kismet",
        "commits": [
            {
                "no": 1,
                "msg": "Catch Prelude exceptions as a stop-gap fix for now\n\nCatch Prelude exceptions as a stop-gap, but what it really needs is a\ntotal rewrite of the Prelude interface, by someone familiar with\nPrelude.\n\nFix...",
                "url": "https://github.com/kismetwireless/kismet/commit/513d0d70692f6d58b8a997d4e437dcad46803b51",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "After installation of all dependencies, ./configure and make",
                        "alertracker.cc的148行宏定义中的函数prelude_init无法在调用图中找到",
                        "alertracker.cc的536行宏定义中的函数sendIDMEF无法在调用图中找到"
                    ],
                    "path": "/home/gk/repos/1k-1.5k/kismet-copies/1"
                }
            },
            {
                "no": 2,
                "msg": "Fix improper buffer use in devicetracker http POST handling\nFix vector cloning in trackedelement\nFix exception catching in HTTP POST and HTTP GET stream handling",
                "url": "https://github.com/kismetwireless/kismet/commit/b09b2122247f5fa89bd93daed377621f9da97b64",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "After installation of all dependencies including python3-setuptools, ./configure still reports python-setuptools missing, but this can be ignored with './configure --disable-python-tools'. However, compilation has errors."
                    ]
                }
            },
            {
                "no": 3,
                "msg": "Fix bad typo that caused auth-req'd Simple Posts to never complete\nAdded a lot of additional exception catchers",
                "url": "https://github.com/kismetwireless/kismet/commit/1ced76a1529b79d1bc323e967974d3cbd5daa20f",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "After installation of all dependencies including python3-setuptools, ./configure still reports python-setuptools missing, but this can be ignored with './configure --disable-python-tools'. However, compilation has errors."
                    ]
                }
            },
            {
                "no": 4,
                "msg": "Handle un-descendable field trees sanely\n\nSome field paths currently cannot be descended (non-unique-key\ncollections like advertised_ssid_map); don't allow descending them\n(return non-existent field) ...",
                "url": "https://github.com/kismetwireless/kismet/commit/f669379a22bbb79b722f9522faf95815b23475ce",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "get_tracker_element_path",
                        "loc": "trackedelement.cc:818:19",
                        "callee": "tracker_element::enforce_type",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "get_tracker_element_path",
                        "loc": "trackedelement.cc:827:24",
                        "callee": "tracker_element::enforce_type",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                }
            }
        ]
    },
    {
        "repo": "MrKepzie/Natron",
        "commits": [
            {
                "no": 5,
                "msg": "Fix uncaught exception",
                "url": "https://github.com/MrKepzie/Natron/commit/2eab69a44e774edcd2f8ca9089eed14a101153c1",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Failed to compile Qt4.8.6 successfully, and I did not find its binaries."
                    ]
                }
            },
            {
                "no": 6,
                "msg": "fix uncaught exception",
                "url": "https://github.com/MrKepzie/Natron/commit/66174f9ee0e12a43f54fc99cf4625de05b4cb0ed",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Failed to compile Qt4.8.6 successfully, and I did not find its binaries."
                    ]
                }
            },
            {
                "no": 7,
                "msg": "fix uncaught exception",
                "url": "https://github.com/MrKepzie/Natron/commit/84ae40c7882e5060cefd26d486b7f53d98fcc2ee",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Failed to compile Qt4.8.6 successfully, and I did not find its binaries."
                    ]
                }
            },
            {
                "no": 8,
                "msg": "Fix uncaught exception + crash",
                "url": "https://github.com/MrKepzie/Natron/commit/cfbefc6fb31faf35fb76933588e1f44c73a5dafc",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Failed to compile Qt4.8.7 successfully, and I did not find its binaries."
                    ]
                }
            }
        ]
    },
    {
        "repo": "xiaoyifang/goldendict-ng",
        "commits": [
            {
                "no": 9,
                "msg": "Fix unhandled exceptions at resources loading",
                "url": "https://github.com/xiaoyifang/goldendict-ng/commit/afaa0a70ab2efe0eb3dd5783210357d5113148b8",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "After installation of all dependencies, I still encounter compilation errors (missing include)."
                    ]
                }
            }
        ]
    },
    {
        "repo": "Soundux/Soundux",
        "commits": [
            {
                "no": 10,
                "msg": "fix(version): catch exceptions caused by invalid tag-names",
                "url": "https://github.com/Soundux/Soundux/commit/ce22450b9ef09ab2a345d823131eb6d8bab18d8b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "git submodule update --init --recursive, and then run cmake normally.",
                        "cg-driver Error detected, see logs for more details"
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "VersionCheck::getStatus",
                        "loc": "/home/gk/repos/1k-1.5k/Soundux-copies/10/src/helper/version/check.cpp:24:51",
                        "callee": "[std]::basic_string::operator basic_string_view",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "VersionCheck::getStatus",
                        "loc": "/home/gk/repos/1k-1.5k/Soundux-copies/10/src/helper/version/check.cpp:24:31",
                        "callee": "[semver]::from_string",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "UPBGE/upbge",
        "commits": [
            {
                "no": 11,
                "msg": "Fix: Proper error handling for STL, PLY, and OBJ IO\n\nProperly handle exceptions from STL and PLY code to prevent crashes on\ninvalid file paths.\n\nThis will now also Report errors/warnings to the caller...",
                "url": "https://github.com/UPBGE/upbge/commit/5d9e127234ed98d9f74b001bf53ffe27453ea86b",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Unknown errors that I failed to understand. The official documentation is a website that is only applicable to the latest version of the project."
                    ]
                }
            },
            {
                "no": 12,
                "msg": "Fix #107932: crash attempting to load invalid OpenVDB file path on macOS\n\nAdd catch all exceptions similar as was done for OpenEXR in #107184, and\nalso properly handle errors in Hydra delegate.",
                "url": "https://github.com/UPBGE/upbge/commit/9419f5a2895fe44c570bdecf63a99570ac21d5b7",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Unknown errors that I failed to understand. The official documentation is a website that is only applicable to the latest version of the project."
                    ]
                }
            },
            {
                "no": 13,
                "msg": "Fix #106977: Crash when OpenEXR IO fails\n\nThe crash can occur in the following situations:\n\n- Attempt to open a corrupted EXR file\n- Attempt to save an EXR file under a non-existing directory.\n\nThe ro...",
                "url": "https://github.com/UPBGE/upbge/commit/b2c822065c0f1f4671c0a471b5718123e83f57ca",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Unknown errors that I failed to understand. The official documentation is a website that is only applicable to the latest version of the project."
                    ]
                }
            },
            {
                "no": 14,
                "msg": "OpenVDB: Fix IOError in try catch statement\n\nBroader exception handling for OpenVDB IO errors.",
                "url": "https://github.com/UPBGE/upbge/commit/1bb702df1e1678b83a7238af2a28ecb73b4fb069",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Unknown errors that I failed to understand. The official documentation is a website that is only applicable to the latest version of the project."
                    ]
                }
            },
            {
                "no": 15,
                "msg": "Fix for an unhandled exception. Campbell: please include in 2.60a.",
                "url": "https://github.com/UPBGE/upbge/commit/726fa618172733f3c4dc5ee85642829400e68f7b",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Unknown errors that I failed to understand. The official documentation is a website that is only applicable to the latest version of the project."
                    ]
                }
            }
        ]
    },
    {
        "repo": "InsightSoftwareConsortium/ITK",
        "commits": [
            {
                "no": 16,
                "msg": "FIX: Caught the exception thrown by the Watershed filter",
                "url": "https://github.com/InsightSoftwareConsortium/ITK/commit/2e93ef1ba5c21ab00e026654161afd8b83cb0eaa",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "This commit is too old and that version of the project depends on a very old version of CMake. It uses a lot of deprecated and at least one removed command(s), which causes CMake errors."
                    ]
                }
            },
            {
                "no": 17,
                "msg": "FIX: try to catch exceptions of rescaling and writing regression images.",
                "url": "https://github.com/InsightSoftwareConsortium/ITK/commit/b275634cda5963bc8d32dfa7de36b8cea2c1977d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "This version does not contain removed CMake commands (although there are many deprecated ones).",
                        "submodule-failed",
                        "cg-driver Error detected, see logs for more details"
                    ]
                }
            },
            {
                "no": 18,
                "msg": "COMP: Fix coverity defects related to RegistrationV4 examples\n\nCoverity reports unhandled exceptions in RegistrationV4 examples,\nand try/catch blocks are added around the point of call.\n\nChange-Id: Ib...",
                "url": "https://github.com/InsightSoftwareConsortium/ITK/commit/bfd4b44fcd742761a4b035e32fd7d55f1ca35d7d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "This version does not contain removed CMake commands (although there are many deprecated ones).",
                        "No such file or directory: '/home/gk/repos/1k-1.5k/ITK-copies/18/build/Modules/Segmentation/LevelSetsv4/test/ITKLevelSetsv4HeaderTest2.cxx'"
                    ]
                }
            }
        ]
    },
    {
        "repo": "timeplus-io/proton",
        "commits": [
            {
                "no": 19,
                "msg": "fix uncaught exception in DatabaseLazy",
                "url": "https://github.com/timeplus-io/proton/commit/90eba0c0f6f396066ac0eb98b9da2cd5423f99f5",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "After 'git submodule update --init --recursive', some submodules are still missing. Need to clone some manually.",
                        "submodule-failed",
                        "No such file or directory: '/home/gk/repos/1k-1.5k/proton-copies/19/build/contrib/llvm/llvm/lib/Frontend/OpenACC/ACC.cpp'",
                        "cg-driver找不到文件：No such file or directory: '/home/gk/repos/1k-1.5k/proton-copies/19/build/contrib/openldap-cmake/ldap_r-version.c'"
                    ]
                }
            },
            {
                "no": 20,
                "msg": "client: try catch for External table exceptions, couple of fixes [METR-10071]",
                "url": "https://github.com/timeplus-io/proton/commit/4ffc3fbdf7e8b320b96e937d46fe79c0918e281e",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "没有cmakeList.txt, bear也无法编译"
                    ]
                }
            },
            {
                "no": 21,
                "msg": "Fix uncaught exception during server termination\n\nExample of a stacktrace:\n\n<details>\n\n```\n[ 47463 ] {} <Trace> BaseDaemon: Received signal 15\n[ 47463 ] {} <Information> Application: Received terminat...",
                "url": "https://github.com/timeplus-io/proton/commit/df414ae71c54faa1eaaa218b80ee904f9948cd07",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        " No such file or directory: '/home/gk/repos/1k-1.5k/proton-copies/21/contrib/krb5/src/util/profile/prof_err.c'",
                        "No such file or directory: '/home/gk/repos/1k-1.5k/proton-copies/21/build/gens/src/proto/grpc/reflection/v1alpha/reflection.grpc.pb.cc'"
                    ]
                }
            },
            {
                "no": 22,
                "msg": "TCPHandler: catch exceptions from the WriteBuffer in destructor\n\nFor TCPHandler it is safe thing todo.\n\nOtherwise *San will report [1]:\n\n    2021.01.24 15:33:40.103996 [ 270 ] {} <Trace> BaseDaemon: R...",
                "url": "https://github.com/timeplus-io/proton/commit/64c0bf98290362fa216c05b070aa122a12af3c25",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "In contrib/mariadb-connector-c/cmake/ConnectorName.cmake, there is an 'END()' that should be replaced with 'ENDIF()'.",
                        "cg-driver报错： No such file or directory: '/home/gk/repos/1k-1.5k/proton-copies/22/build/gens/src/proto/grpc/status/status.pb.cc'"
                    ]
                }
            }
        ]
    },
    {
        "repo": "coin-or/Ipopt",
        "commits": [
            {
                "no": 23,
                "msg": "in C interface, catch also ipopt exceptions thrown within OptimizeTNLP call (fixes ticket #144)\n\nsvn-id: 2094 @trunk",
                "url": "https://github.com/coin-or/Ipopt/commit/7335b0bcd5984f2ea492566eb284bcb657956126",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Need to add space before and after 'IPOPT_VERSION' in Ipopt/src/Algorithm/IpIpoptAlg.cpp:265.",
                        "cg-driver报错：Error while processing /home/gk/repos/1k-1.5k/Ipopt-copies/23/Ipopt/src/Algorithm/LinearSolvers/IpMa28Partition.F. "
                    ]
                }
            }
        ]
    },
    {
        "repo": "dealii/dealii",
        "commits": [
            {
                "no": 24,
                "msg": "fix constructor of InverseMatrixRichardson\\\ncatch exceptions in its vmult functions\n\n\ngit-svn-id: https://svn.dealii.org/trunk@11485 0785d39b-7218-0410-832d-ea1e28bc413d",
                "url": "https://github.com/dealii/dealii/commit/9c8abcadadfff8a7250d838de82707d9fd3d00cb",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "It is too old and contains a lot of non-standard code. Only very very old compilers (GCC 2.x) can compile it."
                    ]
                }
            },
            {
                "no": 25,
                "msg": "The meshes we create here are distorted. Right now we can't fix it,\nbut at least catch the exception that was thrown.\n\n\ngit-svn-id: https://svn.dealii.org/trunk@19088 0785d39b-7218-0410-832d-ea1e28bc4...",
                "url": "https://github.com/dealii/dealii/commit/b4f750250c43a84ef1176eb1d92d60cb780a713d",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "./configure failed. It says posix thread functions are not found. I don't know why."
                    ]
                }
            }
        ]
    },
    {
        "repo": "cra-ros-pkg/robot_localization",
        "commits": [
            {
                "no": 26,
                "msg": "Fix(ros_robot_localization_listener): Catch tf lookup exception",
                "url": "https://github.com/cra-ros-pkg/robot_localization/commit/da85172514f503295cc9d475e490b6927f9ead14",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Dependencies are too hard to install and are required by CMake find_package (neither copied source code nor git submodules)."
                    ]
                }
            },
            {
                "no": 27,
                "msg": "Fix deprecation warnings for upcoming ROS Galactic release (#631)\n\n* Fix deprecation warnings when constructing rclcpp::Duration objects\r\n\r\nIf we are constructing from nanoseconds we must be explicit ...",
                "url": "https://github.com/cra-ros-pkg/robot_localization/commit/9fba3e8e8b30b653f4a00b0a957e4275168fdf9e",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Dependencies are too hard to install and are required by CMake find_package (neither copied source code nor git submodules)."
                    ]
                }
            }
        ]
    },
    {
        "repo": "OpenDDS/OpenDDS",
        "commits": [
            {
                "no": 28,
                "msg": "Restart Test: Fix Possible Uncaught Exception\n\nCoverity CID 1496270",
                "url": "https://github.com/OpenDDS/OpenDDS/commit/0b838dff483f3dcdff9387495c29d7e577544a81",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Compilation has errors."
                    ]
                }
            },
            {
                "no": 29,
                "msg": "Fix uncaught exception",
                "url": "https://github.com/OpenDDS/OpenDDS/commit/5dfc8a1c64f4b5bf2eb4a4473b21ae9210505d0b",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Compilation has errors. (Before ./configure, run 'cp ACE_wrappers/TAO/VERSION.txt ACE_wrappers/TAO/VERSION'.)"
                    ]
                }
            },
            {
                "no": 30,
                "msg": "Addressing Coverity Scan CIDs: 1392424\n\nFix handling of uncaught exceptions.",
                "url": "https://github.com/OpenDDS/OpenDDS/commit/538c75dae2aa6e8b298e48f452df8495501a2518",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Compilation has errors."
                    ]
                }
            },
            {
                "no": 31,
                "msg": "Addressing Coverity Scan CIDs: 1392433, 1392432, 1392430, 1392429, 1392427, 1392424, 1392421.\n\nFix handling of uncaught exceptions.",
                "url": "https://github.com/OpenDDS/OpenDDS/commit/0e9a48ff9b2379da3d59021e66d79a8ba12a2386",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Compilation has errors."
                    ]
                }
            }
        ]
    },
    {
        "repo": "vslavik/winsparkle",
        "commits": [
            {
                "no": 32,
                "msg": "Fix defects in win_sparkle_set_*_callback() implementations.\n\nMust be wrapped in exception catching. Remove superfluous 'return;'.",
                "url": "https://github.com/vslavik/winsparkle/commit/5a9f2c98ccabd2cf0a2aeb819a0371da19113c93",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "It is a Windows project."
                    ]
                }
            }
        ]
    },
    {
        "repo": "Bitcoin-ABC/bitcoin-abc",
        "commits": [
            {
                "no": 33,
                "msg": "rpcserver: attempt to fix uncaught exception.",
                "url": "https://github.com/Bitcoin-ABC/bitcoin-abc/commit/8db17607510eb250f3faf7963affa337eb7039d5",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "./configure --with-incompatible-bdb is required. Compilation has errors."
                    ]
                }
            },
            {
                "no": 34,
                "msg": "Avoid ugly exception in log on unknown inv type\n\nIt is unexpected behavior for `ToString` to raise an exception. It\nis expected to do a best-effort attempt at formatting but never fail.\n\nCatch the exc...",
                "url": "https://github.com/Bitcoin-ABC/bitcoin-abc/commit/e9f25ddd0063f7ea65595178d04370d27344305c",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "./configure --with-incompatible-bdb is required. Compilation has errors."
                    ]
                }
            },
            {
                "no": 35,
                "msg": "ConnectBlock: fix slow usage of AddCoins\n\nSummary:\nIn D2076 the check=true parameter was passed, which doesn't just\nsilently hide overwrites but also causes an extra HaveCoin lookup\nfor each coin. Thi...",
                "url": "https://github.com/Bitcoin-ABC/bitcoin-abc/commit/1e1a278bdee62dbf8086516e21744b0f096b2dd8",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "The documentation says -GNinja is needed.",
                        "No such file or directory: '/home/gk/repos/1k-1.5k/bitcoin-abc-copies/35/build/src/qt/bitcoin-qt_autogen/mocs_compilation.cpp'"
                    ]
                }
            }
        ]
    },
    {
        "repo": "primihub/primihub",
        "commits": [
            {
                "no": 36,
                "msg": "Fix csv read data (#422) (#428)\n\n* fix read CSV data for last column\r\n* catch exception for read dataset",
                "url": "https://github.com/primihub/primihub/commit/0fab4c4f87928bdf5efa7740702369bcdfa986b1",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Unknown errors that I failed to understand."
                    ]
                }
            }
        ]
    },
    {
        "repo": "percona/percona-xtrabackup",
        "commits": [
            {
                "no": 37,
                "msg": "BUG#28793334 Router process is aborted after receiving invalid packet\n\nWhen Router receives an invalid packet during the handshake phase of the\nconnection, it will throw an exception. However, this ex...",
                "url": "https://github.com/percona/percona-xtrabackup/commit/100087703912052baa8b8c67a0036712d573879d",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "It requires boost 1.68.0 (exactly this version). The link to it that this project offers is broken. I tried to download and compile boost 1.68.0 on my own, but encountered compile errors that I had no idea how to fix."
                    ]
                }
            },
            {
                "no": 38,
                "msg": "BUG#28793334 Router process is aborted after receiving invalid packet\n\nWhen Router receives an invalid packet during the handshake phase of the\nconnection, it will throw an exception. However, this ex...",
                "url": "https://github.com/percona/percona-xtrabackup/commit/7a43bf4662a8a6554c2880fee553a01e426b8e2e",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "It requires boost 1.68.0 (exactly this version). The link to it that this project offers is broken. I tried to download and compile boost 1.68.0 on my own, but encountered compile errors that I had no idea how to fix."
                    ]
                }
            }
        ]
    },
    {
        "repo": "SatDump/SatDump",
        "commits": [
            {
                "no": 39,
                "msg": "Fix a few bugs\n\n- Fix a bug in saving METEOR LRPT timestamps in product (was fine in dataset, and in filled data)\n- Handle exceptions when Space-Track does not return valid TLE data",
                "url": "https://github.com/SatDump/SatDump/commit/1bd55e1b19b52ae4c43c0d9f99637de0c5bb3a30",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[satdump]::TLERegistry::get_from_norad_time",
                        "loc": "/home/gk/repos/1k-1.5k/SatDump-copies/39/src-core/common/tracking/tle.cpp:276:34",
                        "callee": "[nlohmann]::basic_json::parse",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        28,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "qtumproject/qtum",
        "commits": [
            {
                "no": 40,
                "msg": "rpcserver: attempt to fix uncaught exception.",
                "url": "https://github.com/qtumproject/qtum/commit/8db17607510eb250f3faf7963affa337eb7039d5",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Same as No 34. These two projects look very similar, which I don't know why."
                    ]
                }
            },
            {
                "no": 41,
                "msg": "Avoid ugly exception in log on unknown inv type\n\nIt is unexpected behavior for `ToString` to raise an exception. It\nis expected to do a best-effort attempt at formatting but never fail.\n\nCatch the exc...",
                "url": "https://github.com/qtumproject/qtum/commit/e9f25ddd0063f7ea65595178d04370d27344305c",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Same as above."
                    ]
                }
            }
        ]
    },
    {
        "repo": "trilinos/Trilinos",
        "commits": [
            {
                "no": 42,
                "msg": "[Kokkos] assortment of small fixes\n\nMostly uncaught exceptions, but also uninitialized variables,\nand division-by-zero checks.\n\nBuild/Test Cases Summary\nEnabled Packages: KokkosClassic\nEnabled all For...",
                "url": "https://github.com/trilinos/Trilinos/commit/c39b8c1264ad54e37fd0bd0c47eb9e10c2ccae55",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "The configuration process uses Python2 and contains Python2 code. I don't know how to tell it where my python2 is. Currently it looks for /usr/bin/python, but I can't just change it to python2 because some other project may assume /usr/bin/python is python3."
                    ]
                }
            }
        ]
    },
    {
        "repo": "zama-ai/concrete",
        "commits": [
            {
                "no": 43,
                "msg": "fix(frontends): add catch-all for exceptions",
                "url": "https://github.com/zama-ai/concrete/commit/5537eb53dead44940584f6af01340077b0c3d735",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "I don't know what causes the errors."
                    ]
                }
            }
        ]
    },
    {
        "repo": "gazebosim/gazebo-classic",
        "commits": [
            {
                "no": 44,
                "msg": "fix uncaught exceptions",
                "url": "https://github.com/gazebosim/gazebo-classic/commit/20b72cfa3229bae8c92b2141711bf16e9a62be17",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "It requires boost.signals, which has been replaced with boost.signals2 since some version of boost. I tried downloading and compiling an older version of boost but failed."
                    ]
                }
            },
            {
                "no": 45,
                "msg": "fix uncaught exceptions",
                "url": "https://github.com/gazebosim/gazebo-classic/commit/3d1cedd7d9e41bca7bc46c9c132a47cf93822993",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "It requires boost.signals, which has been replaced with boost.signals2 since some version of boost. I tried downloading and compiling an older version of boost but failed."
                    ]
                }
            },
            {
                "no": 46,
                "msg": "Warn instead of fail for non-Earth Dem's on 20.04 (#2828) (#2882)\n\n* Dem: check for nullptr and fix memory leak\r\n* Fix deprecation warning\r\n* Catch exceptions from Dem::GetGeoReference* APIs\r\n\r\nWrap c...",
                "url": "https://github.com/gazebosim/gazebo-classic/commit/d133984e11426ae28b2930bd5244d96983bf26d4",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "It requires sdformat9, while sdformat9 and all its dependencies are too difficult to install on Ubuntu 24.04."
                    ]
                }
            }
        ]
    },
    {
        "repo": "inspircd/inspircd",
        "commits": [
            {
                "no": 47,
                "msg": "Fix an unhandled exception crash when rehashing modules.\n\nPreviously we used FOREACH_MOD to call OnRehash which handled any\nthrown exceptions. When we switched to ReadConfig this stopped\nbeing the cas...",
                "url": "https://github.com/inspircd/inspircd/commit/2bce37fc7dc10ad719cddd5094845e57c93ff095",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "configure-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "ARM-software/armnn",
        "commits": [
            {
                "no": 48,
                "msg": "IVGCVSW-7750 DTS: Fix ElementWise isnan assert\n\n* Removed the ASSERTS in TypesUtils.cpp in favour of InvalidArgumentExceptions instead\n* Added a try/catch block when calling EnqueueWorkload to catch E...",
                "url": "https://github.com/ARM-software/armnn/commit/727d017aa3559cb33c97a8d77b5a32fbb98b9e35",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": "cg-driver Error detected, see logs for more details"
                }
            },
            {
                "no": 49,
                "msg": "Fix delegate fallback during VisitNode\n\n During VisitNode throwing an ArmNN exception incorrectly\n terminates the process instead of handing over to tflite\n\n * Catches ArmNN exceptions during VisitNod...",
                "url": "https://github.com/ARM-software/armnn/commit/05b6a3e5946a3f58b6f5b0caface9153a1c2b364",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": "cg-driver Error detected, see logs for more details"
                }
            }
        ]
    },
    {
        "repo": "percona/percona-server",
        "commits": [
            {
                "no": 50,
                "msg": "BUG#28793334 Router process is aborted after receiving invalid packet\n\nWhen Router receives an invalid packet during the handshake phase of the\nconnection, it will throw an exception. However, this ex...",
                "url": "https://github.com/percona/percona-server/commit/100087703912052baa8b8c67a0036712d573879d",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Requries boost1.68.0"
                    ]
                }
            }
        ]
    },
    {
        "repo": "colobot/colobot",
        "commits": [
            {
                "no": 51,
                "msg": "Fix reporting unhandled exceptions in MSVC\n\nFor some reason set_terminate() doesn't work with MSVC2013",
                "url": "https://github.com/colobot/colobot/commit/4d3a0b6602ff3db123433a6dd68905d2770e09da",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "submodule-failed",
                        "callee无法确定"
                    ]
                }
            }
        ]
    },
    {
        "repo": "PDAL/PDAL",
        "commits": [
            {
                "no": 52,
                "msg": "Test fixes (#4187)\n\n* cascade the parse of BOX2D from BOX3D for the BOX3D istream operator\r\n\r\n* catch std::exception from nlohmann for parse errors of bounds\r\n\r\n* relax filters.stats test",
                "url": "https://github.com/PDAL/PDAL/commit/4270dc0c2e79aa85da34ad9c38eb6c0ea72d5643",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Notes": "cg-driver Error detected, see logs for more details"
                }
            }
        ]
    },
    {
        "repo": "herbstluftwm/herbstluftwm",
        "commits": [
            {
                "no": 53,
                "msg": "Catch exceptions by stoi() and stoul() calls (#499)\n\nThis fixes the crash when non-integer values are passed as the\r\nrespective arguments.",
                "url": "https://github.com/herbstluftwm/herbstluftwm/commit/1092fbd2599c4a06a003dd0c91195235b6462f0c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": "cg-driver Error detected, see logs for more details"
                }
            }
        ]
    },
    {
        "repo": "xoreos/xoreos",
        "commits": [
            {
                "no": 54,
                "msg": "GRAPHICS: Catch all exceptions in the CursorManager destructor\n\nThis fixes Coverity Scan issue #1399002.",
                "url": "https://github.com/xoreos/xoreos/commit/2c620ae7ff5c80d801092717bddc7f7b00643f80",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[Graphics]::[Aurora]::CursorManager::~CursorManager",
                        "loc": "/home/gk/repos/1k-1.5k/xoreos-copies/54/src/graphics/aurora/cursorman.cpp:45:2",
                        "callee": "[Graphics]::[Aurora]::CursorManager::clear",
                        "exception": "..."
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": true
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[Graphics]::[Aurora]::CursorManager::~CursorManager",
                        "loc": "/home/gk/repos/1k-1.5k/xoreos-copies/54/src/graphics/aurora/cursorman.cpp:46:2",
                        "callee": "[Graphics]::[Aurora]::CursorManager::showCursor",
                        "exception": "..."
                    },
                    "Context": [
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": true
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 55,
                "msg": "JADE: Catch all exceptions in the Room destructor\n\nThis fixes Coverity Scan issue #1399013.",
                "url": "https://github.com/xoreos/xoreos/commit/d61af991f8198ded8a1b05f400b148aaa9cc21ce",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[Engines]::[Jade]::Room::~Room",
                        "loc": "/home/gk/repos/1k-1.5k/xoreos-copies/55/src/engines/jade/room.cpp:45:2",
                        "callee": "[Engines]::[Jade]::Room::unload",
                        "exception": "..."
                    },
                    "Context": [
                        28
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": true
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 56,
                "msg": "ENGINES: Catch all exceptions in the Console destructor\n\nThis fixes Coverity Scan issue #1399016.",
                "url": "https://github.com/xoreos/xoreos/commit/68ecfffd30e26c0867aafe074d2149f59eeb9e6d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[Engines]::Console::~Console",
                        "loc": "/home/gk/repos/1k-1.5k/xoreos-copies/56/src/engines/aurora/console.cpp:823:2",
                        "callee": "[Engines]::Console::hide",
                        "exception": "..."
                    },
                    "Context": [
                        24,
                        29
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": true
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 57,
                "msg": "ENGINES: Catch all exceptions in the ConsoleWindow destructor\n\nThis fixes Coverity Scan issue #1399019.",
                "url": "https://github.com/xoreos/xoreos/commit/4436356405e36a680139650903af5fd68a62d842",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[Engines]::ConsoleWindow::~ConsoleWindow",
                        "loc": "/home/gk/repos/1k-1.5k/xoreos-copies/57/src/engines/aurora/console.cpp:142:12",
                        "callee": "[Common]::WriteFile::flush",
                        "exception": "..."
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": true
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[Engines]::ConsoleWindow::~ConsoleWindow",
                        "loc": "/home/gk/repos/1k-1.5k/xoreos-copies/57/src/engines/aurora/console.cpp:143:12",
                        "callee": "[Common]::WriteFile::close",
                        "exception": "..."
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 58,
                "msg": "GRAPHICS: Catch all exceptions in the GraphicsManager destructor\n\nThis fixes Coverity Scan issue #1399021.",
                "url": "https://github.com/xoreos/xoreos/commit/6c703a99f1d9c40e2186d6f47df59ca4c310a6b8",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[Graphics]::GraphicsManager::~GraphicsManager",
                        "loc": "/home/gk/repos/1k-1.5k/xoreos-copies/58/src/graphics/graphics.cpp:119:2",
                        "callee": "[Graphics]::GraphicsManager::deinit",
                        "exception": "..."
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": ""
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 59,
                "msg": "AURORA: Catch all exceptions in the Lua Variable destructor\n\nThis fixes Coverity Scan issue #1399025.",
                "url": "https://github.com/xoreos/xoreos/commit/25bec064112786ae6f201151e3605a6c148d0411",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[Aurora]::[Lua]::Variable::~Variable",
                        "loc": "/home/gk/repos/1k-1.5k/xoreos-copies/59/src/aurora/lua/variable.cpp:86:2",
                        "callee": "[Aurora]::[Lua]::Variable::setType",
                        "exception": "..."
                    },
                    "Context": [
                        12
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": ""
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                }
            },
            {
                "no": 60,
                "msg": "AURORA: Catch all exceptions in the NWScript Variable destructor\n\nThis fixes Coverity Scan issue #1399032.",
                "url": "https://github.com/xoreos/xoreos/commit/769cb854566d20bacb7bcfddcbde3ccda5e67e1b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[Aurora]::[NWScript]::Variable::~Variable",
                        "loc": "/home/gk/repos/1k-1.5k/xoreos-copies/60/src/aurora/nwscript/variable.cpp:95:2",
                        "callee": "[Aurora]::[NWScript]::Variable::setType",
                        "exception": "..."
                    },
                    "Context": [
                        30
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": ""
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                }
            }
        ]
    },
    {
        "repo": "cms-sw/cmssw",
        "commits": [
            {
                "no": 61,
                "msg": "Coverity mergedDefectId 13007 fix :\nInstead of re-throwing an exception in CmsShowMain constructor, try/catch exception in main() function.",
                "url": "https://github.com/cms-sw/cmssw/commit/6e302f8c9412e03937a2716e061ff431c23802a9",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 62,
                "msg": "Fix Coverity error (Uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/78b8c0ed6c89a5d8e355c65b4f7012001715cd56",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 63,
                "msg": "Fix Coverity errors (uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/e8d09593c4e2bde51787d92785fdb69b25a0880a",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 64,
                "msg": "Fix errors reported by Coverity (uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/f5ec438a0fd6e6dd2c0d663323d413ccbfdb1e88",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 65,
                "msg": "Fix errors fond by Coverity (uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/b760f609e94f0a64c2ffb1a18a9db239ba64191a",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 66,
                "msg": "Fix errors reported by Coverity (uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/5e0855b16de5bb7a63293da4e4aa22d70f2565ec",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 67,
                "msg": "Fix for Coverity reported defects (uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/ba39b48db9e3c3142751730e008d6af3641ebf21",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 68,
                "msg": "Fix for Coverity reported defects (uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/78bde5216ebd15a0ccb1cf98d4bfe04c5d921691",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 69,
                "msg": "Fix for Coverity reported defect (uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/1c880f291ba0e1f2429f537967d3709c74585c65",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 70,
                "msg": "Fix for Coverity reported defect (uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/b0a34de39df12c9d570453defdd149856088f694",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 71,
                "msg": "Fix for Coverity reported defect (uncaught exceptions)",
                "url": "https://github.com/cms-sw/cmssw/commit/15cf3e47506c9d23a97b8f76e34a9908902d40d9",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            }
        ]
    },
    {
        "repo": "genodelabs/genode",
        "commits": [
            {
                "no": 72,
                "msg": "qemu-usb: handle Interface_not_found exceptions\n\nFix genodelabs/genode#4572",
                "url": "https://github.com/genodelabs/genode/commit/48eacb6f799b4f0f57c673ccb6e53e4bc777024d",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 73,
                "msg": "platform_drv: fix uncaught exception\n\nCalling alloc_dma_buffer() with size=0 will cause an exception in the\nram allocator.\n\ngenodelabs/genode#4518",
                "url": "https://github.com/genodelabs/genode/commit/3b0995cb4997c948833558888e5e8b750c910a58",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 74,
                "msg": "nic_router: fix uncaught bit alloc exception\n\n* catch every possible path of the Bit_allocator_dynamic::Out_of_indices\n  exception\n* add unconditional log output in the new \"catch\" directives, so, we ...",
                "url": "https://github.com/genodelabs/genode/commit/25a212aa2409f7a66f304ebbc141ffd2dd549331",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 75,
                "msg": "qemu-usb: catch exception on already gone devices\n\nFixes #3893",
                "url": "https://github.com/genodelabs/genode/commit/e5fe9c6fc78232c16858894ca675ab9674e97293",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 76,
                "msg": "vbox: handle invalid dataspace exception\n\nFixes #3566",
                "url": "https://github.com/genodelabs/genode/commit/c1e181a4070353030ceba911932a8634a34413db",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 77,
                "msg": "Catch exceptions when creating VFS\n\nCatch exceptions at File_system_factory::create.\nPrint error message in Dir_file_system.\n\nFixes #1786",
                "url": "https://github.com/genodelabs/genode/commit/549f77eafe1d2e5592e655c8247de7afc07984b3",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 78,
                "msg": "nic_router: fix uncaught exception on re-configure",
                "url": "https://github.com/genodelabs/genode/commit/c32c584f65e3446ff5041fb30347277bfcfab9c5",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 79,
                "msg": "Catch session exceptions during VFS File_system stat\n\nFix #3173",
                "url": "https://github.com/genodelabs/genode/commit/6c7356072d2fe624b3677d2dea6e8e6757709c12",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 80,
                "msg": "nic_router: uncaught exc. on handling link state\n\nAn interface that received a signal for a link-state change accessed its\ndomain reference without assuming that it could not be attached to a domain\na...",
                "url": "https://github.com/genodelabs/genode/commit/2afae7e7c14ef14584abd9b0626e371fa96b5edb",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 81,
                "msg": "dde_ipxe: catch exception instead of dying silently\n\nFix #593",
                "url": "https://github.com/genodelabs/genode/commit/f6d31d7243077efe65a438216a847569d89aec29",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 82,
                "msg": "heap: fix exception handling in _allocate_dataspace\n\nPreviously, only Invalid_dataspace, Region_conflict, and Out_of_ram were\nhandled for both allocate and attach with the same handlers. However,\nboth...",
                "url": "https://github.com/genodelabs/genode/commit/8fb0d668e0cab582dcca5a412d18e64e47a01847",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 83,
                "msg": "Catch 'File_system::Lookup_failed' exception\n\nIn 'Fs_file_system::open()' the call of '_fs.dir()' can throw a\n'File_system::Lookup_failed' exception, which gets explicitly caught\nwith this patch.\n\nFix...",
                "url": "https://github.com/genodelabs/genode/commit/9a8fb36b1c345d259380f9862162916bad40f102",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 84,
                "msg": "packet_allocator: catch expection when calling free()\n\nIf a client acknowledges the same packet more than once, the packet also\ngets freed more than once. At the second attempt the underlaying\nBit_arr...",
                "url": "https://github.com/genodelabs/genode/commit/e4f6fca3559ff8c6ea9b658013e785c97b9a4799",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 85,
                "msg": "nic_router: fix uncaught interface RAM exhaustion\n\n* Catch Quota_guard exceptions wherever we do 'new (_alloc)' in Interface\n  and in case drop the packet that caused the exception\n* Modify Interface:...",
                "url": "https://github.com/genodelabs/genode/commit/bf055e2cb45b415f8cbaa199c161563c9ce2da86",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 86,
                "msg": "nic_router: fix uncaught Domain_tree::No_match\n\nWhen having an interface that yet is not attached to a domain, then a new\nconfiguration comes in and the interface receives a domain name (via the\npolic...",
                "url": "https://github.com/genodelabs/genode/commit/87eb23f5626446d348c11133e46a4720bcb2b3f4",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": []
                }
            }
        ]
    },
    {
        "repo": "ElementsProject/elements",
        "commits": [
            {
                "no": 87,
                "msg": "rpcserver: attempt to fix uncaught exception.",
                "url": "https://github.com/ElementsProject/elements/commit/8db17607510eb250f3faf7963affa337eb7039d5",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Same as No 34."
                    ]
                }
            },
            {
                "no": 88,
                "msg": "Avoid ugly exception in log on unknown inv type\n\nIt is unexpected behavior for `ToString` to raise an exception. It\nis expected to do a best-effort attempt at formatting but never fail.\n\nCatch the exc...",
                "url": "https://github.com/ElementsProject/elements/commit/e9f25ddd0063f7ea65595178d04370d27344305c",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "Same as No 34."
                    ]
                }
            }
        ]
    },
    {
        "repo": "cocaine/cocaine-core",
        "commits": [
            {
                "no": 89,
                "msg": "fix: catch more exceptions (#165)",
                "url": "https://github.com/cocaine/cocaine-core/commit/21c87f514d0de410bd17ac81d8887530d95d4cb1",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "I did 'ln -s $file /usr/lib/x86_64-linux-gnu/(string replace 'c.' '.' $file)' for every 'file' in '(ls /usr/lib/x86_64-linux-gnu | grep msgpack)'.",
                        "cg-driver Error detected, see logs for more details"
                    ]
                }
            },
            {
                "no": 90,
                "msg": "fix: catch exceptions while attaching node",
                "url": "https://github.com/cocaine/cocaine-core/commit/69a8503049519aa94264f06d721c588a27fc9ad5",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "It says the commit needed in foreign/rapidjson is not found. Not sure if compilation will succeed.",
                        "cg-driver Error detected, see logs for more details"
                    ]
                }
            },
            {
                "no": 91,
                "msg": "fix: catch closed session exceptions (#108)",
                "url": "https://github.com/cocaine/cocaine-core/commit/cb61ce5d4671c5c3d05938c960a1015e7fbc7636",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "It says the commit needed in foreign/rapidjson is not found. Not sure if compilation will succeed.",
                        "cg-driver Error detected, see logs for more details"
                    ]
                }
            },
            {
                "no": 92,
                "msg": "[Bug Fix] Following an upstream contract.\n\nIt's always a good idea to catch all potentially possible exceptions.",
                "url": "https://github.com/cocaine/cocaine-core/commit/805d4bd9f9c905e3f9202d05d9b1a11a6c9a3b2b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "It says the commit needed in foreign/rapidjson is not found. Not sure if compilation will succeed.",
                        "cg-driver Error detected, see logs for more details"
                    ]
                }
            }
        ]
    },
    {
        "repo": "brainboxdotcc/DPP",
        "commits": [
            {
                "no": 93,
                "msg": "FIX: exceptions potentially not caught when reconnecting failed websocket in voice client",
                "url": "https://github.com/brainboxdotcc/DPP/commit/aeb636200993318ddba31faaf21d73753bc112c9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "cg-driver Error detected, see logs for more details"
                    ]
                }
            }
        ]
    },
    {
        "repo": "Icinga/icinga2",
        "commits": [
            {
                "no": 94,
                "msg": "API: Handle permission exceptions soon enough, returning 404\n\nfixes #7513",
                "url": "https://github.com/Icinga/icinga2/commit/f419efd778f3f9114b21ededba481b74998bb7e4",
                "fix_1": {
                    "Info": {
                        "caller": "[icinga]::HttpHandler::ProcessRequest",
                        "loc": "/home/zhh/projects/1.5k-2k/icinga2/94/lib/remote/httphandler.cpp:102:16",
                        "callee": "[icinga]::HttpHandler::HandleRequest",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        8,
                        14
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 95,
                "msg": "Bugfix: Unhandled exception in Service::CheckTimerHandler.\n\nFixes #3607",
                "url": "https://github.com/Icinga/icinga2/commit/5492d6fac38a66172205711a9e96141c6b0b6a61",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": [
                        "路径：/home/zhh/projects/1.5k-2k/icinga2/95",
                        "cg-driver 报错Error while processing /home/zhh/projects/1.5k-2k/icinga2/95/lib/base/stream_bio.cpp."
                    ]
                }
            },
            {
                "no": 96,
                "msg": "Handle exceptions for NetString::WriteStringToStream in ApiListener::ReplayLog\n\nfixes #10455",
                "url": "https://github.com/Icinga/icinga2/commit/618e031f4606c065f3c9a72aa6599bde6c1acd16",
                "fix_1": {
                    "Info": {
                        "caller": "[icinga]::ApiListener::ReplayLog",
                        "loc": "/home/zhh/projects/1.5k-2k/icinga2/96/lib/remote/apilistener.cpp:827:5",
                        "callee": "[icinga]::NetString::WriteStringToStream",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        6
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 97,
                "msg": "Improve error handling for empty packages in /v1/config/packages\n\n- If there is no package main directory, assume \"empty packages\".\n- Catch exceptions thrown through GlobRecursive() and present a bett...",
                "url": "https://github.com/Icinga/icinga2/commit/1969a9071a488398a1bb906285e1f94b3c5f54bb",
                "fix_1": {
                    "Info": {
                        "caller": "[icinga]::ConfigPackagesHandler::HandleGet",
                        "loc": "/home/zhh/projects/1.5k-2k/icinga2/97/lib/remote/configpackageshandler.cpp:52:33",
                        "callee": "[icinga]::ConfigPackageUtility::GetPackages",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 98,
                "msg": "Improve error handling for empty packages in /v1/config/packages\n\n- If there is no package main directory, assume \"empty packages\".\n- Catch exceptions thrown through GlobRecursive() and present a bett...",
                "url": "https://github.com/Icinga/icinga2/commit/429f518b4983d0fbe518c1d2ceaacfc988e7c15d",
                "fix_1": {
                    "Info": {
                        "caller": "[icinga]::ConfigPackagesHandler::HandleGet",
                        "loc": "/home/zhh/projects/1.5k-2k/icinga2/98/lib/remote/configpackageshandler.cpp:51:33",
                        "callee": "[icinga]::ConfigPackageUtility::GetPackages",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "widelands/widelands",
        "commits": [
            {
                "no": 99,
                "msg": "Logic exception handling fixes (#6053)\n\n- Forward logic thread exceptions to main thread's handler\r\n- Forbid changing soldier capacity in replays",
                "url": "https://github.com/widelands/widelands/commit/9cc90af5bad0e1ca584882ceeb24104a3c7ea70e",
                "fix_1": {
                    "Info": {
                        "caller": "[UI]::Panel::logic_thread",
                        "loc": "/home/zhh/projects/1.5k-2k/widelands/99/src/ui_basic/panel.cc:209:8",
                        "callee": "[UI]::Panel::game_logic_think",
                        "exception": "c:@S@WException"
                    },
                    "Context": [
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[UI]::Panel::logic_thread",
                        "loc": "/home/zhh/projects/1.5k-2k/widelands/99/src/ui_basic/panel.cc:209:8",
                        "callee": "[UI]::Panel::game_logic_think",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 100,
                "msg": "Fix bug #2310041 (control structure bogus: exception escaping from destructor (see Bjarne Stroustrup's book \"The C++ Programming Language\", special edition, section 14.4.7 (page 373)). Catch exception...",
                "url": "https://github.com/widelands/widelands/commit/b085d2d6978863b0e8666a13f8c8b3aeef9aa77c",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "路径：/home/zhh/projects/1.5k-2k/widelands/100",
                        "没编译成功"
                    ]
                }
            },
            {
                "no": 101,
                "msg": "When loading a building from a savegame and encountering an animation name that does not correspond to an animation that is defined for the building's type, catch the Map_Object_Descr::Animation_Nonex...",
                "url": "https://github.com/widelands/widelands/commit/026ce32f55335b375bad3d0c1bc095ccbd93c458",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "路径：/home/zhh/projects/1.5k-2k/widelands/100",
                        "没编译成功"
                    ]
                }
            }
        ]
    },
    {
        "repo": "apache/incubator-pegasus",
        "commits": [
            {
                "no": 102,
                "msg": "fix: catch exception if unmarshall the rpc request encounters error (#790)",
                "url": "https://github.com/apache/incubator-pegasus/commit/80392779b27bff5562b23388f2a66aa6c50da38e",
                "fix_1": {
                    "Info": {
                        "caller": "pegasus_server_write::on_batched_write_requests",
                        "loc": "/home/jlq/repo/1.5k-2k/incubator-pegasus/src/server/pegasus_server_write.cpp:62:21",
                        "callee": "_non_batch_write_handlers",
                        "exception": "TTransportException"
                    },
                    "Context": [
                        20
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "pegasus_server_write::on_batched_write_requests",
                        "loc": "/home/jlq/repo/1.5k-2k/incubator-pegasus/src/server/pegasus_server_write.cpp:104:25",
                        "callee": "_non_batch_write_handlers",
                        "exception": "TTransportException"
                    },
                    "Context": [
                        20
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "AcademySoftwareFoundation/OpenImageIO",
        "commits": [
            {
                "no": 103,
                "msg": "Fixes to reduce problems identified by static analysis (#4113)\n\n* pngoutput.cpp: Catch possible exceptions.\r\n* printinfo.cpp: assertions to assure we don't dereference a null\r\npointer.\r\n* testtex.cpp:...",
                "url": "https://github.com/AcademySoftwareFoundation/OpenImageIO/commit/cfb7918d27a7905213716c095ba875ed25b2890a",
                "fix_1": {
                    "Info": {
                        "caller": "[OpenImageIO_v2_6_0]::PNGOutput::~PNGOutput",
                        "loc": "/home/zhh/projects/1.5k-2k/OpenImageIO/103/src/png.imageio/pngoutput.cpp:122:5",
                        "callee": "[OpenImageIO_v2_6_0]::PNGOutput::close",
                        "exception": "..."
                    },
                    "Context": [
                        28
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": ""
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 104,
                "msg": "Fix PNM bug -- need to catch exceptions in its stream I/O.",
                "url": "https://github.com/AcademySoftwareFoundation/OpenImageIO/commit/54e3d42e34a5dbf925f6687503386abf062a526f",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "没编译成功"
                    ]
                }
            },
            {
                "no": 105,
                "msg": "Catch all exceptions with catch(...)\n\nSome places -- notably, the parts of OIIO that deal with field3d and\nOpenColorIO -- already put a catch(...) even after catches of other\nspecific exceptions. But ...",
                "url": "https://github.com/AcademySoftwareFoundation/OpenImageIO/commit/19332c6c96bd79ad800e6cb6e2ff67dca5b6b939",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "没编译成功"
                    ]
                }
            }
        ]
    },
    {
        "repo": "Corvusoft/restbed",
        "commits": [
            {
                "no": 106,
                "msg": "handle exception in `session->fetch()`\nfixes https://github.com/Corvusoft/restbed/issues/259",
                "url": "https://github.com/Corvusoft/restbed/commit/77353f7c578603d74472cfb6524bb1efe36f7bdf",
                "fix_1": {
                    "Info": {
                        "caller": "[restbed]::[detail]::SessionImpl::fetch_body",
                        "loc": "/home/jlq/repo/1.5k-2k/restbed/source/corvusoft/restbed/detail/session_impl.cpp:103:13",
                        "callee": "[std]::function::operator()",
                        "exception": "c:@N@std@S@regex_error"
                    },
                    "Context": [
                        29,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[restbed]::[detail]::SessionImpl::fetch_body",
                        "loc": "/home/jlq/repo/1.5k-2k/restbed/source/corvusoft/restbed/detail/session_impl.cpp:103:13",
                        "callee": "[std]::function::operator()",
                        "exception": "status_code (New!)"
                    },
                    "Context": [
                        29
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "[restbed]::[detail]::SessionImpl::fetch_body",
                        "loc": "/home/jlq/repo/1.5k-2k/restbed/source/corvusoft/restbed/detail/session_impl.cpp:103:13",
                        "callee": "[std]::function::operator()",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        29,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "[restbed]::[detail]::SessionImpl::fetch_body",
                        "loc": "/home/jlq/repo/1.5k-2k/restbed/source/corvusoft/restbed/detail/session_impl.cpp:103:13",
                        "callee": "[std]::function::operator()",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        29,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "[restbed]::[detail]::SessionImpl::fetch_body",
                        "loc": "/home/jlq/repo/1.5k-2k/restbed/source/corvusoft/restbed/detail/session_impl.cpp:103:13",
                        "callee": "[std]::function::operator()",
                        "exception": "..."
                    },
                    "Context": [
                        28
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "mfontanini/libtins",
        "commits": [
            {
                "no": 107,
                "msg": "Catch exceptions on arpmonitor\n\nFixes #119",
                "url": "https://github.com/mfontanini/libtins/commit/36216107ec865553ba2fb2e5f8db31f2df537215",
                "fix_1": {
                    "Info": {
                        "caller": "main",
                        "loc": "/home/jlq/repo/1.5k-2k/libtins/examples/arpmonitor.cpp:96:5",
                        "callee": "[Sniffer]::sniffer",
                        "exception": "std::exception"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "TrenchBroom/TrenchBroom",
        "commits": [
            {
                "no": 108,
                "msg": "3132: handle directoryExists() exception (#3145)\n\n* 3132: handle directoryExists() exception\r\n\r\nFixes #3132\r\n\r\n* 3132: add some tests for fixPath/directoryExists dealing with\r\ntreating files as direct...",
                "url": "https://github.com/TrenchBroom/TrenchBroom/commit/5b5f95e63749c5635e8b5f6c7bef46651683c5b6",
                "fix_1": {
                    "Info": {
                        "caller": "TrenchBroom::Model::GameFileSystem::addDefaultAssetPaths",
                        "loc": "/home/jlq/repo/1.5k-2k/TrenchBroom/common/src/Model/GameFileSystem.cpp:78:2",
                        "callee": "TrenchBroom::IO::Disk::directoryExists",
                        "exception": "FileSystemException"
                    },
                    "Context": [
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 109,
                "msg": "3447: catch exceptions in compile dialog with malformed EL input\n\nFixes #3447",
                "url": "https://github.com/TrenchBroom/TrenchBroom/commit/e6577a702f1fe08ac25b98063ccb5303a6531067",
                "fix_1": {
                    "Info": {
                        "caller": "std::string TrenchBroom::View::CompilationRun::buildWorkDir",
                        "loc": "/home/jlq/repo/1.5k-2k/TrenchBroom/common/src/View/CompilationRun.cpp:89:17",
                        "callee": "TrenchBroom::EL::interpolate",
                        "exception": "Exception"
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "TrenchBroom::View::CompilationTaskEditorBase::updateCompleter",
                        "loc": "/home/jlq/repo/1.5k-2k/TrenchBroom/common/src/View/CompilationTaskListBox.cpp:84:27",
                        "callee": "TrenchBroom::EL::interpolate",
                        "exception": "Exception"
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 110,
                "msg": "EntityModelManager::renderer: catch exceptions thrown by model() (#1531)\n\nFixes https://github.com/kduske/TrenchBroom/issues/1525",
                "url": "https://github.com/TrenchBroom/TrenchBroom/commit/399226caa3e397e3819904c4ff5f0aaa0016a0f3",
                "fix_1": {
                    "Info": {
                        "caller": "TrenchBroom::Assets::EntityModelManager::safeGetModel",
                        "loc": "/home/jlq/repo/1.5k-2k/TrenchBroom/common/src/Assets/EntityModelManager.cpp:98:24",
                        "callee": "TrenchBroom::Assets::EntityModelManager::model",
                        "exception": "GameException"
                    },
                    "Context": [
                        28,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                }
            }
        ]
    },
    {
        "repo": "haiku/haiku",
        "commits": [
            {
                "no": 111,
                "msg": "Tracker: Add a try/catch around ModelMenuItem's creation in AddOneAddOn.\n\nModelMenuItem can throw exceptions if its Model fails to initialize,\nand even though we pass a Model in directly, copying the ...",
                "url": "https://github.com/haiku/haiku/commit/eca86a00ae913c3c91ddfb55a67d3c5b2318fab8",
                "fix_1": {
                    "Info": {
                        "caller": "AddOneAddOn",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/kits/tracker/ContainerWindow.cpp:252:20",
                        "callee": "BPrivate::ModelMenuItem::ModelMenuItem",
                        "exception": "..."
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 112,
                "msg": "IMAP: Fixed stream vs. parse exception handling.\n\n* Protocol::HandleNextResponse() will now exit when a stream exception\n  occurs.\n* This should fix bug #12601.",
                "url": "https://github.com/haiku/haiku/commit/f429e4f4424b1c9797f49071e280edc6747c8a9f",
                "fix_1": {
                    "Info": {
                        "caller": "status_t IMAP::Protocol::HandleResponse",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/add-ons/mail_daemon/inbound_protocols/imap/imap_lib/Protocol.cpp:325:38",
                        "callee": "IMAP::ResponseParser::NextResponse",
                        "exception": "StreamException"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                }
            },
            {
                "no": 113,
                "msg": "Fix an instance where an allocation wasn't checked for success.\nWrap call to SymbolLookup::Init() in a try/catch block since it could\npotentially throw an exception. This was causing the debugger to t...",
                "url": "https://github.com/haiku/haiku/commit/6997467eea5b79eec323fa681b373ef7295c9c7a",
                "fix_1": {
                    "Info": {
                        "caller": "debug_create_symbol_lookup_context",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/kits/debug/debug_support.cpp:368:26",
                        "callee": "BPrivate::Debug::SymbolLookup::Init",
                        "exception": "BPrivate::Debug::Exception exception"
                    },
                    "Context": [
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 114,
                "msg": "HaikuDepot: Flesh out PackageActions a bit.\n\n- Add background worker thread for asynchronous processing of\n  package actions.\n- Implement InstallPackageAction. As such, installing packages now\n  actua...",
                "url": "https://github.com/haiku/haiku/commit/db259584cacc8003271f839e49bc2963420af1b4",
                "fix_1": {
                    "Info": {
                        "caller": "MainWindow::_RefreshRepositories",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/apps/haiku-depot/MainWindow.cpp:261:26",
                        "callee": "BPackageKit::BRequest::Process",
                        "exception": "BFatalErrorException"
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "MainWindow::_RefreshRepositories",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/apps/haiku-depot/MainWindow.cpp:261:26",
                        "callee": "BPackageKit::BRequest::Process",
                        "exception": "BException"
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "MainWindow::_RefreshPackageList",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/apps/haiku-depot/MainWindow.cpp:292:25",
                        "callee": "BPackageKit::BManager::BPrivate::BPackageManager::Init",
                        "exception": "BException"
                    },
                    "Context": [
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "InstallPackageAction::Perform",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/apps/haiku-depot/PackageManager.cpp:76:30",
                        "callee": "BPackageKit::BManager::BPrivate::BPackageManager::Install",
                        "exception": "BFatalErrorException"
                    },
                    "Context": [
                        1,
                        14
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "InstallPackageAction::Perform",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/apps/haiku-depot/PackageManager.cpp:76:30",
                        "callee": "BPackageKit::BManager::BPrivate::BPackageManager::Install",
                        "exception": "BException "
                    },
                    "Context": [
                        1,
                        14
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_6": {
                    "Info": {
                        "caller": "PackageManager::RefreshRepository",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/apps/haiku-depot/PackageManager.cpp:175:18",
                        "callee": "BPackageKit::BRefreshRepositoryRequest::BRefreshRepositoryRequest",
                        "exception": "BFatalErrorException "
                    },
                    "Context": [
                        1,
                        14
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_7": {
                    "Info": {
                        "caller": "PackageManager::RefreshRepository",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/apps/haiku-depot/PackageManager.cpp:175:18",
                        "callee": "BPackageKit::BRefreshRepositoryRequest::BRefreshRepositoryRequest",
                        "exception": "BException  "
                    },
                    "Context": [
                        1,
                        14
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_8": {
                    "Info": {
                        "caller": "PackageManager::DownloadPackage",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/apps/haiku-depot/PackageManager.cpp:196:18",
                        "callee": "BPackageKit::DownloadFileRequest::DownloadFileRequest",
                        "exception": "BFatalErrorException  "
                    },
                    "Context": [
                        1,
                        14
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_9": {
                    "Info": {
                        "caller": "PackageManager::DownloadPackage",
                        "loc": "/home/jlq/repo/1.5k-2k/haiku/src/apps/haiku-depot/PackageManager.cpp:196:18",
                        "callee": "BPackageKit::DownloadFileRequest::DownloadFileRequest",
                        "exception": "BException"
                    },
                    "Context": [
                        1,
                        14
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "ytsaurus/ytsaurus",
        "commits": [
            {
                "no": 115,
                "msg": "Fix uncaught exception in setting memory guarantee",
                "url": "https://github.com/ytsaurus/ytsaurus/commit/bb2ea73c25ecd628dcd90fe99d2b29f1d672239f",
                "fix_1": {
                    "Info": {
                        "caller": "DoInitialize",
                        "loc": "/home/jlq/repo/1.5k-2k/ytsaurus/yt/yt/server/node/cluster_node/bootstrap.cpp:917:31",
                        "callee": "TPortoInstance::SetMemoryGuarantee",
                        "exception": "std::exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": ""
                    }
                }
            },
            {
                "no": 116,
                "msg": "Fix unhandled exception",
                "url": "https://github.com/ytsaurus/ytsaurus/commit/436c7da2303615167866b9456e698b9679909f81"
            }
        ]
    },
    {
        "repo": "shader-slang/slang",
        "commits": [
            {
                "no": 117,
                "msg": "Bug fix in C++ extractor (#1429)\n\n* Fix bug from change in diagnostics.\r\n\r\n* Catch exceptions and display a message on problem with C++ extractor.",
                "url": "https://github.com/shader-slang/slang/commit/dfc9100bbd451a5752ed543a503e2574d3dcdaa5",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": [
                        "callee无法确定"
                    ]
                }
            },
            {
                "no": 118,
                "msg": "Catch exceptions inside FindTypeByName()\n\nIf `spReflection_FindTypeByName` is called with a string that refers to the name of a variable instead of a type, then it ends up causing a fatal error to be ...",
                "url": "https://github.com/shader-slang/slang/commit/63bed4c37199f2436c81089a08834d7b58b8e576",
                "fix_1": {
                    "Info": {
                        "caller": "spReflection_FindTypeByName",
                        "loc": "/home/jlq/repo/1.5k-2k/slang/source/slang/slang-reflection.cpp:603:40",
                        "callee": "Slang::ComponentType::getTypeFromString",
                        "exception": "..."
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "PolyMC/PolyMC",
        "commits": [
            {
                "no": 119,
                "msg": "fix: handle json exception in FileResolvingTask\n\nAlso needed to add a call to loop.exit() in FlameInstanceCreationTask so\nthat it would handle the failure of FileResolvingTask properly\n\nSigned-off-by:...",
                "url": "https://github.com/PolyMC/PolyMC/commit/33634764e99a89fb5a494c4f95b10b907c1c7c9e",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": [
                        "java版本无法适配，切换到合适版本仍然不行"
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[Flame]::FileResolvingTask::netJobFinished",
                        "loc": "/home/zhh/projects/1.5k-2k/PolyMC/119/launcher/modplatform/flame/FileResolvingTask.cpp:44:16",
                        "callee": "[Json]::requireDocument",
                        "exception": "JSONValidationError (New!)"
                    },
                    "Context": [
                        7,
                        27
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": true
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "KiCad/kicad-source-mirror",
        "commits": [
            {
                "no": 120,
                "msg": "SIMULATOR_FRAME_UI: catch all nlohmann::json::xxx errors.\n\nPreviously, only nlohmann::json::type_error was captured, and other errors\nwere not handled, creating unhandled exception issue when reading ...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/e2e95ec461e8ce0d2c5f16d1b599bff058be390f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": [
                        "只能用gcc，无法用clang"
                    ]
                }
            },
            {
                "no": 121,
                "msg": "EasyEDA Pro import: make sure to use UTF-8 for project.json and device.json.\n\nAlso catch exceptions.\n\nFixes https://gitlab.com/kicad/code/kicad/-/issues/17248",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/219d0c399d7dac030d28e1b11f4e2874a3d5e2e0",
                "fix_1": {
                    "Info": {
                        "caller": "[EASYEDAPRO]::ReadProjectOrDeviceFile",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/121/common/io/easyedapro/easyedapro_import_utils.cpp:157:41",
                        "callee": "wxMemoryOutputStream::GetOutputStreamBuffer",
                        "exception": "c:@N@nlohmann@N@json_abi_v3_11_3@N@detail@S@exception"
                    },
                    "Context": [
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[EASYEDAPRO]::ReadProjectOrDeviceFile",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/121/common/io/easyedapro/easyedapro_import_utils.cpp:157:41",
                        "callee": "wxMemoryOutputStream::GetOutputStreamBuffer",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        25,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 122,
                "msg": "Database: handle more possible datatype exceptions\n\nFixes https://gitlab.com/kicad/code/kicad/-/issues/16090",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/44374c661f33a5f85236677dad0ff9db6a99f2d3",
                "fix_1": {
                    "Info": {
                        "caller": "SCH_DATABASE_PLUGIN::loadSymbolFromRow",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/122/eeschema/sch_plugins/database/sch_database_plugin.cpp:554:25",
                        "callee": "[std]::any_cast",
                        "exception": " std::bad_any_cast (New!)"
                    },
                    "Context": [
                        19
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "DATABASE_CONNECTION::SelectOne",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/122/common/database/database_connection.cpp:447:64",
                        "callee": "[nanodbc]::result::get",
                        "exception": "nanodbc::null_access_error (New!)"
                    },
                    "Context": [
                        1
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "DATABASE_CONNECTION::SelectAll",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/122/common/database/database_connection.cpp:561:67",
                        "callee": "[nanodbc]::result::get",
                        "exception": "nanodbc::null_access_error (New!)"
                    },
                    "Context": [
                        1
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "DATABASE_CONNECTION::SelectAll",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/122/common/database/database_connection.cpp:561:67",
                        "callee": "[nanodbc]::result::get",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "DATABASE_CONNECTION::SelectAll",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/122/common/database/database_connection.cpp:566:54",
                        "callee": "[nanodbc]::result::get",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 123,
                "msg": "spice_library_parser: catch an exception thrown when a spice model cannot be built.\nFixes #15012\nhttps://gitlab.com/kicad/code/kicad/-/issues/15012",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/a9fff8266435d3cb63a13483d107c46579844d14",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "cg-driver 报错  Error while processing /home/zhh/projects/1.5k-2k/kicad-source-mirror/123/tools/property_tree.cpp."
                    ]
                }
            },
            {
                "no": 124,
                "msg": "Catch parsing exceptions of the local repository.json\n\nFixes KICAD-B9",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/6029fae30bd9c55cbbae9b28f13e720e70800816",
                "fix_1": {
                    "Info": {
                        "caller": "PLUGIN_CONTENT_MANAGER::CacheRepository",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/124/kicad/pcm/pcm.cpp:456:40",
                        "callee": "[nlohmann]::basic_json::get",
                        "exception": "..."
                    },
                    "Context": [
                        4,
                        6,
                        19
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 125,
                "msg": "Fix crash in Altium schematic importer.\n\nThe crash was caused by an unhandled exception. The uncaught exception\ncaused a cacophony of null configuration setting pointers so guards were\nadded to preven...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/5001555f0eddfa8be17b695e5b3b4cb8209d9b26",
                "fix_1": {
                    "Info": {
                        "caller": "SCH_ALTIUM_PLUGIN::ParseAltiumSch",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/125/eeschema/sch_plugins/altium/sch_altium_plugin.cpp:343:9",
                        "callee": "SCH_ALTIUM_PLUGIN::ParseAdditional",
                        "exception": "c:@N@std@S@nested_exception"
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "SCH_ALTIUM_PLUGIN::ParseAltiumSch",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/125/eeschema/sch_plugins/altium/sch_altium_plugin.cpp:340:9",
                        "callee": "SCH_ALTIUM_PLUGIN::ParseFileHeader",
                        "exception": "c:@N@std@S@nested_exception"
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "SCH_ALTIUM_PLUGIN::ParseAltiumSch",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/125/eeschema/sch_plugins/altium/sch_altium_plugin.cpp:339:9",
                        "callee": "SCH_ALTIUM_PLUGIN::ParseStorage",
                        "exception": "c:@N@std@S@nested_exception"
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 126,
                "msg": "Fix not handled exceptions.",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/a855c9a40c7c04e01115c5a5e89d16f8167f358a",
                "fix_1": {
                    "Info": {
                        "caller": "idf_export_footprint",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/126/pcbnew/exporters/export_idf.cpp:285:57",
                        "callee": "FP_LIB_TABLE::FindRow",
                        "exception": "..."
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "idf_export_footprint",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/126/pcbnew/exporters/export_idf.cpp:285:37",
                        "callee": "PROJECT::PcbFootprintLibs",
                        "exception": "..."
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "idf_export_footprint",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/126/pcbnew/exporters/export_idf.cpp:285:23",
                        "callee": "BOARD::GetProject",
                        "exception": "..."
                    },
                    "Context": [
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "EXPORTER_PCB_VRML::ExportVrmlFootprint",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/126/pcbnew/exporters/exporter_vrml.cpp:1003:40",
                        "callee": "PROJECT::PcbFootprintLibs",
                        "exception": "..."
                    },
                    "Context": [
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "EXPORTER_PCB_VRML::ExportVrmlFootprint",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/126/pcbnew/exporters/exporter_vrml.cpp:1003:60",
                        "callee": "FP_LIB_TABLE::FindRow",
                        "exception": "..."
                    },
                    "Context": [
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                },
                "fix_6": {
                    "Info": {
                        "caller": "EXPORTER_PCB_VRML::ExportVrmlFootprint",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/126/pcbnew/exporters/exporter_vrml.cpp:1003:26",
                        "callee": "BOARD::GetProject",
                        "exception": "..."
                    },
                    "Context": [
                        25,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 127,
                "msg": "Safely load python plugins\n\nCatch potential exceptions when doing the initial python plugin load\n\nFixes https://gitlab.com/kicad/code/kicad/issues/12231",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/1d223d143915233456e9961c78c6c615c88948d5",
                "fix_1": {
                    "Info": {
                        "caller": "SCRIPTING_TOOL::ReloadPlugins",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/127/pcbnew/python/scripting/pcb_scripting_tool.cpp:84:5",
                        "callee": "SCRIPTING_TOOL::callLoadPlugins",
                        "exception": "..."
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "SCRIPTING_TOOL::reloadPlugins",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/127/pcbnew/python/scripting/pcb_scripting_tool.cpp:96:9",
                        "callee": "SCRIPTING_TOOL::callLoadPlugins",
                        "exception": "..."
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 128,
                "msg": "sim_model: Fix a not handled exception that fully freeze Eeschema.\nCan happens with schematics with old sim parameter syntax.",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/bbdb30135e6dc57616ba109c440f79c63d328771",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": [
                        "可以编译,但是无法确定callee"
                    ]
                }
            },
            {
                "no": 129,
                "msg": "sim_model: Fix another not handled exception that fully freeze Eeschema.\nCan happens with schematics with old sim parameter syntax.\nFix also another crash in sim_model.",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/cdcf875ec03546d96326d25710dfdf8a8cc07ca3",
                "fix_1": {
                    "Info": {
                        "caller": "SIM_MODEL::Create",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/129/eeschema/sim/sim_model.cpp:495:12",
                        "callee": "SIM_MODEL::SetBaseModel",
                        "exception": "c:@S@IO_ERROR"
                    },
                    "Context": [
                        17,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "SIM_MODEL::Create",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/129/eeschema/sim/sim_model.cpp:513:12",
                        "callee": "SIM_MODEL::SetBaseModel",
                        "exception": "c:@S@IO_ERROR"
                    },
                    "Context": [
                        17,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 130,
                "msg": "Fix not handled exception, creating a crash.\nFixes #12536\nhttps://gitlab.com/kicad/code/kicad/issues/12536",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/b5dfa4e2fb3e238e86dc3226a214b073b8804290",
                "fix_1": {
                    "Info": {
                        "caller": "PANEL_FP_PROPERTIES_3D_MODEL::validateModelExists",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/130/pcbnew/dialogs/panel_fp_properties_3d_model.cpp:433:22",
                        "callee": "KIWAY_HOLDER::Prj",
                        "exception": "..."
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "PANEL_FP_PROPERTIES_3D_MODEL::validateModelExists",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/130/pcbnew/dialogs/panel_fp_properties_3d_model.cpp:433:48",
                        "callee": "FP_LIB_TABLE::FindRow",
                        "exception": "..."
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "PANEL_FP_PROPERTIES_3D_MODEL::validateModelExists",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/130/pcbnew/dialogs/panel_fp_properties_3d_model.cpp:433:28",
                        "callee": "PROJECT::PcbFootprintLibs",
                        "exception": "..."
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 131,
                "msg": "3D viewer: catch an exception thrown when a fp library is not found in table,\nwhen the 3D viewer try to rebuild the 3D shape of a footprint.\nFixes #12524\nhttps://gitlab.com/kicad/code/kicad/issues/125...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/5b8cf9673670d756b56249382fd9496a1b17bb82",
                "fix_1": {
                    "Info": {
                        "caller": "RENDER_3D_OPENGL::load3dModels",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/131/3d-viewer/3d_rendering/opengl/create_scene.cpp:932:82",
                        "callee": "FP_LIB_TABLE::FindRow",
                        "exception": "..."
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "RENDER_3D_OPENGL::load3dModels",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/131/3d-viewer/3d_rendering/opengl/create_scene.cpp:932:62",
                        "callee": "PROJECT::PcbFootprintLibs",
                        "exception": "..."
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "RENDER_3D_OPENGL::load3dModels",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/131/3d-viewer/3d_rendering/opengl/create_scene.cpp:932:48",
                        "callee": "BOARD::GetProject",
                        "exception": "..."
                    },
                    "Context": [
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "RENDER_3D_OPENGL::load3dModels",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/131/3d-viewer/3d_rendering/opengl/create_scene.cpp:932:36",
                        "callee": "BOARD_ADAPTER::GetBoard",
                        "exception": "..."
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "RENDER_3D_RAYTRACE::load3DModels",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/131/3d-viewer/3d_rendering/raytracing/create_scene.cpp:1262:86",
                        "callee": "FP_LIB_TABLE::FindRow",
                        "exception": "..."
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": true
                    }
                },
                "fix_6": {
                    "Info": {
                        "caller": "RENDER_3D_RAYTRACE::load3DModels",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/131/3d-viewer/3d_rendering/raytracing/create_scene.cpp:1262:40",
                        "callee": "BOARD_ADAPTER::GetBoard",
                        "exception": "..."
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_7": {
                    "Info": {
                        "caller": "RENDER_3D_RAYTRACE::load3DModels",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/131/3d-viewer/3d_rendering/raytracing/create_scene.cpp:1262:52",
                        "callee": "BOARD::GetProject",
                        "exception": "..."
                    },
                    "Context": [
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_8": {
                    "Info": {
                        "caller": "RENDER_3D_RAYTRACE::load3DModels",
                        "loc": "/home/zhh/projects/1.5k-2k/kicad-source-mirror/131/3d-viewer/3d_rendering/raytracing/create_scene.cpp:1262:66",
                        "callee": "PROJECT::PcbFootprintLibs",
                        "exception": "..."
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": true,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 132,
                "msg": "Handle exceptions thrown by footprint library table\n\nFixes https://gitlab.com/kicad/code/kicad/-/issues/7973",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/e1840ccbd325d4cf06eae467732af25878f9eef2",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "编译成功，但是无法确定callee"
                    ]
                }
            },
            {
                "no": 133,
                "msg": "Handle exception when JSON datatype mismatches\n\nFixes #4031",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/2662b06099690d524b6335af1e664d3cd7b0d610",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "cg-driver 失败"
                    ]
                }
            },
            {
                "no": 134,
                "msg": "Fix DoRePaint routine in EDA_3D_CANVAS\n - Check that we aren't already painting (return if we are)\n - Check that GLEW functions exist before calling them in 3D canvas and throw exception if they are n...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/1bbc5691510445c56dd73b65d1d5717697d09554",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "cg-driver 失败"
                    ]
                }
            },
            {
                "no": 135,
                "msg": "Fix a Coverity report (catches an unhandled exception).",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/24e7f961b94610fc9ebaeca1d7851767fb0cba99",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "编译失败"
                    ]
                }
            },
            {
                "no": 136,
                "msg": "Catch exception so that we at least throw up an error message.\n\nFixes https://gitlab.com/kicad/code/kicad/issues/4677",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/940570e9ec6614127f72c498bd1328409fde7d14",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "编译成功，但是无法确定callee"
                    ]
                }
            },
            {
                "no": 137,
                "msg": "Fix save library bug in symbol editor.\n\nAdd try/catch blocks when saving symbols using a plugin object directly\nto prevent potential unhandled exception bugs.  I'm not totally happy\nusing wxLogError t...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/f53aa513264ef9cd82d0b756b9194229b29d155c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "cg-driver 失败"
                    ]
                }
            },
            {
                "no": 138,
                "msg": "Coverity report fix: handle an exception potentially thrown by CONTEXT_MENU::runOnSubmenus.",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/a09d6431e47f6e84ca69a7e1460336a579617ea9",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "无法编译"
                    ]
                }
            },
            {
                "no": 139,
                "msg": "Fix symbol library viewer crash.\n\nHandle exception in best zoom method when a symbol could not be loaded\nfrom the symbol library table.  This was triggered by an empty symbol\nlibrary table but could b...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/8de70f3dd02e9d48c88efeac9c5b33696a5b8121",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "无法编译"
                    ]
                }
            },
            {
                "no": 140,
                "msg": "fixes Coverity issue 109780 in project_rescue.cpp: an uncaught exception on load or save of the project library list",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/140d17bf824e232c9f2a1e219dae91386d916335",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "无法编译"
                    ]
                }
            },
            {
                "no": 141,
                "msg": "Footprint library table fixes.\n\n* Pcbnew: catch exceptions when saving changes to footprint library table.\n* Pcbnew: update footprint viewer library list if open when footprint library\n  table changes...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/5821d4bc48e67a3581a0150d5481c6358f0c4722",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "编译失败"
                    ]
                }
            },
            {
                "no": 142,
                "msg": "Symbol library archive bug fixes.\n\nMove FindAlias() inside a try/catch block as is can throw an exception.\n\nDon't abort adding symbols to library when a symbol cannot be found in\nthe symbol library ta...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/168bf5e4b02e10aa573a649bcca9bf6a11182ccd",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "编译失败"
                    ]
                }
            },
            {
                "no": 143,
                "msg": "Fix bug in legacy schematic I/O plugin.\n\nMove adding LIB_PART to library until the part is fully parse.  The problem\nwas unique_ptr was cleaning up the part when an exception was thrown during\nparsing...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/e8cf4f0724d00cc8b010edb6a26ced08c2add076",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "编译失败"
                    ]
                }
            },
            {
                "no": 144,
                "msg": "KiCad: fix crash when kiface libraries are missing. (fixes lp:1577786)\n\n* An assumption was made that wxDynamicLibrary.Load() would always result in\n  a wxLogSystemError on failure which was not alway...",
                "url": "https://github.com/KiCad/kicad-source-mirror/commit/21595f48d38a15e22f60c51f96e7a82b6a6e1188",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "编译失败"
                    ]
                }
            }
        ]
    },
    {
        "repo": "synfig/synfig",
        "commits": [
            {
                "no": 145,
                "msg": "fix catch exceptions",
                "url": "https://github.com/synfig/synfig/commit/23151497c12471193e57f07233631aca0c26df9e",
                "fix_1": {
                    "Info": {
                        "caller": "[studio]::Grid_SoundWave::load_sound_file",
                        "loc": "/home/jlq/repo/project/synfig/145/synfig/synfig-studio/src/gui/docks/dock_soundwave.cpp:341:22",
                        "callee": "[studio]::Widget_SoundWave::load",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        28
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            },
            {
                "no": 146,
                "msg": "fix uncaught exceptions in state_polygon destructor\n\na destructor shouldn't throw exception anyway:\nhttps://rules.sonarsource.com/cpp/RSPEC-3654\n\nfix Coverity issues CID 308620, 308960, 308965, 308978...",
                "url": "https://github.com/synfig/synfig/commit/2f2f78c65086518015d853b090db88af926a4116",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": [
                        "commit里面没有catch"
                    ]
                }
            },
            {
                "no": 147,
                "msg": "fix uncaught exception in state_stroke destructor\n\nFix Coverity issue CID 308639",
                "url": "https://github.com/synfig/synfig/commit/ef8f17e9ceab89b620bb5387285ee463acfabdf9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": [
                        "commit里面没有catch"
                    ]
                }
            },
            {
                "no": 148,
                "msg": "fix uncaught exceptions in destructors in canvasview.cpp\n\nfix Coverity issues 308612, 344421, 344423",
                "url": "https://github.com/synfig/synfig/commit/f3d757db2c4aaf5302849ab13ba73aeb518a21b3",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "Note": [
                        "commit里面没有catch"
                    ]
                }
            },
            {
                "no": 149,
                "msg": "Fix : Segfault occurs when changing time of keyframe with new_index 0\nTest if current keyframe is not first one (index 0) before search for preivous kf\n+\nAdd explicit catch exception message in case o...",
                "url": "https://github.com/synfig/synfig/commit/09f80506303bbf3969ce2f8610cfa3279eafa5a9",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "半成品无法编译"
                    ]
                }
            }
        ]
    },
    {
        "repo": "apache/trafficserver",
        "commits": [
            {
                "no": 150,
                "msg": "CID1508922 - Fix Uncaught exception. (#11166)",
                "url": "https://github.com/apache/trafficserver/commit/4681638c043a23834cec85a2d55a0cddd071881f",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "可以编译,但是无法确定callee"
                    ]
                }
            }
        ]
    },
    {
        "repo": "matt-42/silicon",
        "commits": [
            {
                "no": 151,
                "msg": "Fix non-catched exception in mhd backend.",
                "url": "https://github.com/matt-42/silicon/commit/6354339dd05317ecf5605c8c014f29e06c6c1890",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "编译成功，但是该commit没有增加catch"
                    ]
                }
            }
        ]
    },
    {
        "repo": "pit-ray/win-vind",
        "commits": [
            {
                "no": 152,
                "msg": "fix uncaught exception",
                "url": "https://github.com/pit-ray/win-vind/commit/cad398bc7bf57154273d5279afc5155f8ee56345",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "无法编译，只在win系统才行"
                    ]
                }
            }
        ]
    },
    {
        "repo": "elfmz/far2l",
        "commits": [
            {
                "no": 153,
                "msg": "fix possible uncaught exception",
                "url": "https://github.com/elfmz/far2l/commit/7b5f0216e8e6c8b4b59b90683d6efdcf5cd54ed9",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "可以编译,但是无法确定callee"
                    ]
                }
            },
            {
                "no": 154,
                "msg": "fix potential uncaught exception",
                "url": "https://github.com/elfmz/far2l/commit/8150a2166a95789f9df291a52d024fecaadb3b12",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "可以编译,但是无法确定callee"
                    ]
                }
            }
        ]
    },
    {
        "repo": "bambulab/BambuStudio",
        "commits": [
            {
                "no": 155,
                "msg": "FIX: handle exception of dividing by zero in arranging\n\njira: none\nChange-Id: I0d20464dbe81a80293539100f06d72dee456a27b\n(cherry picked from commit 94746ae9bf7f467243849570450567b4fdc78e3a)",
                "url": "https://github.com/bambulab/BambuStudio/commit/96e214739471ecf6a0d9fd0188e33eef92b7527c",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "cg-driver 报错  "
                    ]
                }
            }
        ]
    },
    {
        "repo": "CollaboraOnline/online",
        "commits": [
            {
                "no": 156,
                "msg": "Handle JSON exception when parsing commands fixes #3916\n\nSigned-off-by: Szymon Kłos <szymon.klos@collabora.com>\nChange-Id: I9bd78ded46d1b5cd4816a106b138583e540f0712",
                "url": "https://github.com/CollaboraOnline/online/commit/07003f88e948e25f458ba2af7b591dba8152d086",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "根据configure脚本编译，但是不知道怎么生成compiler command"
                    ]
                }
            },
            {
                "no": 157,
                "msg": "Catch also NetException in SocketProcessor()\n\nDoesn't seem to fix anything, but probably is a good idea to not let\nsuch an exception propagate, but treat it as the connection closing.",
                "url": "https://github.com/CollaboraOnline/online/commit/321b244eb3ca76d70efb1e9a31cd8375f8b01531",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "根据configure脚本编译，但是不知道怎么生成compiler command"
                    ]
                }
            }
        ]
    },
    {
        "repo": "OSGeo/PROJ",
        "commits": [
            {
                "no": 158,
                "msg": "proj_crs_get_datum_forced(): catch potential exception (fixes CID 358433, 358434, 358435)",
                "url": "https://github.com/OSGeo/PROJ/commit/7f0b6bd9c6978ac7639bcaf0de452cb29318e683",
                "fix_1": {
                    "Info": {
                        "caller": "proj_crs_get_datum_forced",
                        "loc": "/home/jlq/repo/1.5k-2k/PROJ/src/iso19111/c_api.cpp:8482:12",
                        "callee": "pj_obj_create",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "pioneerspacesim/pioneer",
        "commits": [
            {
                "no": 159,
                "msg": "Update SIZET_FMT and catch fmt::system_error exception\n\nFixes #4888\nCatch and silently ignore fmt::system_error exception when using fmt::print on stdout and stderr. This will occur if there is no con...",
                "url": "https://github.com/pioneerspacesim/pioneer/commit/c5d382e5c9ddcafd2b819518f3c12c4ce3d80930",
                "fix_1": {
                    "Info": {
                        "caller": "[Log]::Logger::WriteLog",
                        "loc": "/home/jlq/repo/1.5k-2k/pioneer/src/core/Log.cpp:89:3",
                        "callee": "[fmt]::print",
                        "exception": "std::exception (New!)"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": false
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "4paradigm/OpenMLDB",
        "commits": [
            {
                "no": 160,
                "msg": "fix: catch exception in showschema",
                "url": "https://github.com/4paradigm/OpenMLDB/commit/50379178192eb625cebbb9124ba3d6131673e698",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "无法编译"
                    ]
                }
            }
        ]
    },
    {
        "repo": "GameTechDev/PresentMon",
        "commits": [
            {
                "no": 161,
                "msg": "Fixing Coverity issues to catch various exceptions",
                "url": "https://github.com/GameTechDev/PresentMon/commit/fc89dadb12c959d42ff0af1134b28468083c9fd9",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "无法编译"
                    ]
                }
            }
        ]
    },
    {
        "repo": "loot/loot",
        "commits": [
            {
                "no": 162,
                "msg": "Fix startup crash due to filesystem permissions.\n\nAn exception can be thrown when checking if a path exists, if the user\ndoesn't have permission to read that path. This exception wasn't getting\ncaught...",
                "url": "https://github.com/loot/loot/commit/82aa208db6da6da4a969142b06537495836bd8bc",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "无法编译"
                    ]
                }
            }
        ]
    },
    {
        "repo": "gnss-sdr/gnss-sdr",
        "commits": [
            {
                "no": 163,
                "msg": "Fix exception catch",
                "url": "https://github.com/gnss-sdr/gnss-sdr/commit/d83083a6555d6396dd33fd1d88c62b9f63e544e0",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "Log4cpp安装了仍然找不到"
                    ]
                }
            },
            {
                "no": 164,
                "msg": "Fix uncaught exception",
                "url": "https://github.com/gnss-sdr/gnss-sdr/commit/937238b0a6cce3a58de79ff78276b4c8b519b828",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "aclocal找不到，apt search搜不到"
                    ]
                }
            },
            {
                "no": 165,
                "msg": "Fix uncatched exception",
                "url": "https://github.com/gnss-sdr/gnss-sdr/commit/d3fbfb38db9b57568863d790d42ff701dca642f7",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "代码前后矛盾，无法修改"
                    ]
                }
            },
            {
                "no": 166,
                "msg": "Fix const correctness when catching exceptions\n\nSee https://stackoverflow.com/questions/7581654/about-catching-exception-good-practices\nUnneeded includes unistd.h removed\nClose dump files in destructo...",
                "url": "https://github.com/gnss-sdr/gnss-sdr/commit/85cc7802be97cf13f257b96663d1a50d86a3fa29",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "Note": [
                        "代码前后矛盾，无法修改"
                    ]
                }
            }
        ]
    },
    {
        "repo": "microsoft/DirectXShaderCompiler",
        "commits": [
            {
                "no": 167,
                "msg": "Fix thread malloc issue with GetConstantBufferByName (#3033)\n\n- Switches to StringRef for keys since these won't attempt to allocate string on find.\r\n- Ensure string is owned by the CShaderReflectionC...",
                "url": "https://github.com/microsoft/DirectXShaderCompiler/commit/f78b10c83663a23006bdec8c2dec2a26419cc275",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "hyperion-project/hyperion.ng",
        "commits": [
            {
                "no": 168,
                "msg": "fix uncatched exception in json message handling (#164)",
                "url": "https://github.com/hyperion-project/hyperion.ng/commit/cf2b8b88ee343f26428710f6f60082634146065d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "无法确定callee"
                    ]
                }
            }
        ]
    },
    {
        "repo": "ChaiScript/ChaiScript",
        "commits": [
            {
                "no": 169,
                "msg": "Fix unhandled exception found via libfuzzer",
                "url": "https://github.com/ChaiScript/ChaiScript/commit/cfb2e663d36d84130aacd1abd6807e73452c3f6a",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "fix_1": {
                    "Info": {
                        "caller": "[chaiscript]::[parser]::ChaiScript_Parser::Char_Parser::~Char_Parser",
                        "loc": "/home/gk/repos/2k-3k/ChaiScript-copies/169/include/chaiscript/language/chaiscript_parser.hpp:1055:13",
                        "callee": "[chaiscript]::[parser]::ChaiScript_Parser::Char_Parser::process_octal",
                        "exception": "c:@N@std@S@invalid_argument"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": ""
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[chaiscript]::[parser]::ChaiScript_Parser::Char_Parser::~Char_Parser",
                        "loc": "/home/gk/repos/2k-3k/ChaiScript-copies/169/include/chaiscript/language/chaiscript_parser.hpp:1059:13",
                        "callee": "[chaiscript]::[parser]::ChaiScript_Parser::Char_Parser::process_hex",
                        "exception": "c:@N@std@S@invalid_argument"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": ""
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "[chaiscript]::[parser]::ChaiScript_Parser::Char_Parser::~Char_Parser",
                        "loc": "/home/gk/repos/2k-3k/ChaiScript-copies/169/include/chaiscript/language/chaiscript_parser.hpp:1063:13",
                        "callee": "[chaiscript]::[parser]::ChaiScript_Parser::Char_Parser::process_unicode",
                        "exception": "c:@N@std@S@invalid_argument"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": ""
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": false,
                        "has direct throw": false
                    }
                }
            }
        ]
    },
    {
        "repo": "trustwallet/wallet-core",
        "commits": [
            {
                "no": 170,
                "msg": "Fix HDWallet crash, catch all stored key exceptions (#347)\n\nFix #336",
                "url": "https://github.com/trustwallet/wallet-core/commit/2f04dfacf21a1d75d90f53c14ccfb51e42e5d398",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "lbryio/lbrycrd",
        "commits": [
            {
                "no": 171,
                "msg": "rpcserver: attempt to fix uncaught exception.",
                "url": "https://github.com/lbryio/lbrycrd/commit/8db17607510eb250f3faf7963affa337eb7039d5",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "configure-failed"
                    ]
                }
            },
            {
                "no": 172,
                "msg": "Avoid ugly exception in log on unknown inv type\n\nIt is unexpected behavior for `ToString` to raise an exception. It\nis expected to do a best-effort attempt at formatting but never fail.\n\nCatch the exc...",
                "url": "https://github.com/lbryio/lbrycrd/commit/e9f25ddd0063f7ea65595178d04370d27344305c",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "configure-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "Kitware/VTK",
        "commits": [
            {
                "no": 173,
                "msg": "vtkReaderExecutive: temporary fix for paraview/paraview#20640.\n\nThis is temporary workaround to avoid issue reported in\nparaview/paraview#20640. vtkReaderExecutive now catches any exceptions\nthrown by...",
                "url": "https://github.com/Kitware/VTK/commit/139a6c43617ed6e45526c02a3b5c041a05a1cbee",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "cg-driver   No such file or directory: '/home/gk/repos/2k-3k/VTK-copies/173/build/Rendering/OpenGL2/vtkEDLBilateralFilterFS.cxx'"
                    ]
                }
            },
            {
                "no": 174,
                "msg": "Fix for MFC compatibility issue with bad_alloc\n\nTo be able to catch allocation failures, when VTK is running in the context of other framework (e.g. MFC), we should use (...) in the catch handler inst...",
                "url": "https://github.com/Kitware/VTK/commit/c44bf3a0e345f9cec2407dedda99b926813b35b9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "cg-driver No such file or directory: '/home/gk/repos/2k-3k/VTK-copies/174/build/VolumeRendering/vtkHAVSVolumeMapper_k2EndFP.cxx'"
                    ]
                }
            },
            {
                "no": 175,
                "msg": "Fix for MFC compatibility issue with bad_alloc\n\nTo be able to catch allocation failures, when VTK is running in the context of other framework (e.g. MFC), we should use (...) in the catch handler inst...",
                "url": "https://github.com/Kitware/VTK/commit/072cf0d6bcc8d47cd837b90e0b830ac7eccbd1ac",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "cg-driver No such file or directory: '/home/gk/repos/2k-3k/VTK-copies/175/build/Rendering/vtkShadowMapPassShader_fs.cxx'"
                    ]
                }
            }
        ]
    },
    {
        "repo": "stan-dev/stan",
        "commits": [
            {
                "no": 176,
                "msg": "Fixes #2562. Updating src/stan/services/util/initialize.hpp to handle exception behavior in new generated code.",
                "url": "https://github.com/stan-dev/stan/commit/b456e0e5e21050b5b3482075387091e7d3e22034",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "make-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "facebook/fbthrift",
        "commits": [
            {
                "no": 177,
                "msg": "Fix cpp2 server code for EventHandlers that rethrow.\n\nSummary:\n[Thrift] Fix cpp2 server code for EventHandlers that rethrow.\n\nBefore D2219542, exceptions from the generated handler deriving the `SvIf`...",
                "url": "https://github.com/facebook/fbthrift/commit/8473a5b5e9150407e914612bda2ecbf130e279ed",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 178,
                "msg": "crash fixer: catch all exceptions where TSocketAddress throws system_error\n\nSummary:\nThere are only two places actually, one in proxygen one in thrift.\n\nThis workaround would presumably fix the top1 c...",
                "url": "https://github.com/facebook/fbthrift/commit/5f6a4f8879ab8c84744189a20d3a5613fae737d8",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 179,
                "msg": "(rocket)(fix) handle decompression failure case\n\nSummary: Exception may throw during uncompressRequest. If it is not try-catched properly it will break assumption about rocket server connection reques...",
                "url": "https://github.com/facebook/fbthrift/commit/44b07a6fc874e286857433f636cef90114f8adb7",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "LibreOffice/core",
        "commits": [
            {
                "no": 180,
                "msg": "framework: MenuBarManager: fix WNT crash if queryDispatch() throws\n\na Java extension throws RuntimeException from queryDispatch(), which is\ntranslated to a C++ exception and thrown by the mscx_uno bri...",
                "url": "https://github.com/LibreOffice/core/commit/447a15f4772bcbc9366cfa43b92c55ae644e9b03",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed",
                        "submodule-failed",
                        "make-failed"
                    ]
                }
            },
            {
                "no": 181,
                "msg": "tdf#159307 add default macOS certificate manager applications\n\nMost, if not all, of the Linux certificate manager applications are\nnot available on macOS so create a separate list for macOS.\n\nAlso, fi...",
                "url": "https://github.com/LibreOffice/core/commit/29bf86f7cb367705b13049e5f0b3faa8bb93638a",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed"
                    ]
                }
            },
            {
                "no": 182,
                "msg": "fix: #89182# catch exception in HasParentFolder()",
                "url": "https://github.com/LibreOffice/core/commit/9465996a580ccd8e3685246f347f8e1165cbc0fc",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed"
                    ]
                }
            },
            {
                "no": 183,
                "msg": "Resolves: rhbz#693265 fix crash from unhandled exception",
                "url": "https://github.com/LibreOffice/core/commit/7fc89a55bffe61aac5c67044bf6eb7ed3808eef1",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed"
                    ]
                }
            },
            {
                "no": 184,
                "msg": "fix unhandled exception terminate on ooo48061-1.sxw\n\nChange-Id: Ibacb94e719f42faa87ece48051ed8f72c3c78d02",
                "url": "https://github.com/LibreOffice/core/commit/82a30a456e08a27267c35c3df0c6ecd8b9079611",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed"
                    ]
                }
            },
            {
                "no": 185,
                "msg": "FmGridControl:  handle non-existing properties\n\nFix crash with unhandled exception requesting \"Description\".\n\nChange-Id: I6b6cb61273fb042532ab63620729f4129239fe81",
                "url": "https://github.com/LibreOffice/core/commit/32e2c6456fb3bf3bf75f9b11c90193c537b4ef26",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed"
                    ]
                }
            },
            {
                "no": 186,
                "msg": "winaccessibility: fix exception handling in AccEventListener\n\nRemoveMeFromBroadcaster() may catch a DisposedException and then not\ncall NotifyDestroy.\n\nChange-Id: I2b766541c3e6800c88a83aa482de0093714d...",
                "url": "https://github.com/LibreOffice/core/commit/9e351edccf3b9a71bb310bcaefe07821479ff5e5",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed"
                    ]
                }
            },
            {
                "no": 187,
                "msg": "Resolves: #i119912# Crash when redo split pasted table used by chart\n\nfix: While deleting any box from chart data provider, verify whether there are\nany invalidate chart data sequence inside, if so, c...",
                "url": "https://github.com/LibreOffice/core/commit/2c737cedd914e30b013b090392a43a4cb48e62a6",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed"
                    ]
                }
            },
            {
                "no": 188,
                "msg": "tdf#112931 always signal AllUserEventsProcessed\n\nIf the last user event triggers a nested event loop, there is\nno event in the nested loop, but AllUserEventsProcessed will\nnot be signaled, resulting i...",
                "url": "https://github.com/LibreOffice/core/commit/6d7191a9bbbae1421edc7d94dccc040f622bc227",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed"
                    ]
                }
            },
            {
                "no": 189,
                "msg": "Work around Coverity warnings about std::length_error\n\n...escaping from main or being unexpected, in various places, which started when\n62dbe2e6eb30660f252b4e2c048f4aecf28e41c6 \"Clean up osl_getSystem...",
                "url": "https://github.com/LibreOffice/core/commit/963612613ac95d391ea051f596d24fff6cf3b8d2",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "preconfigure-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "root-project/root",
        "commits": [
            {
                "no": 190,
                "msg": "fix for Coverity (23382) uncaught exception\n\n\ngit-svn-id: http://root.cern.ch/svn/root/trunk@41064 27541ba8-7e3a-0410-8455-c3a389f83636",
                "url": "https://github.com/root-project/root/commit/10b2fe4307386bf0fffe8770db321930e5f73f90",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "SuperTux/supertux",
        "commits": [
            {
                "no": 191,
                "msg": "supertux/main: add try-catch for locale initialization. (#1601)\n\n* supertux/main: add try-catch block around locale initialization.\r\n\r\nUnfortunately, libstdc++'s locale implementation is platform spec...",
                "url": "https://github.com/SuperTux/supertux/commit/60d9afbda07966eb6c8cb3e144f8d1878368efc9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "cg-driver error"
                    ]
                }
            }
        ]
    },
    {
        "repo": "qt-creator/qt-creator",
        "commits": [
            {
                "no": 192,
                "msg": "QmlDesigner: Catch potential exceptions\n\nThis fixes any crashes related to uncaught exceptions when\nreparenting in the navigator.\n\nTask-number: QTCREATORBUG-19272\nChange-Id: If087b866059cd285413d54f57...",
                "url": "https://github.com/qt-creator/qt-creator/commit/de43bd5a596ce6a5a88bf9c28b937f155d339cca",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 193,
                "msg": "QmlDesigner: copy and paste fixes\n\nimports are now properly forwarded and we catch\nexceptions.",
                "url": "https://github.com/qt-creator/qt-creator/commit/343719d132993dced593910f0da7df2ee2c88e68",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 194,
                "msg": "Sqlite: Transaction catch exception in destructor\n\nFixes coverity warning. We want to throw an exception in the destructor\nin this case, which is save because it is a RAII pattern and holds\nonly trivi...",
                "url": "https://github.com/qt-creator/qt-creator/commit/dfb9e4355f14afd9b543b9967aa3095eb6b431eb",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            }
        ]
    },
    {
        "repo": "facebook/mysql-5.6",
        "commits": [
            {
                "no": 195,
                "msg": "BUG#28793334 Router process is aborted after receiving invalid packet\n\nWhen Router receives an invalid packet during the handshake phase of the\nconnection, it will throw an exception. However, this ex...",
                "url": "https://github.com/facebook/mysql-5.6/commit/7a43bf4662a8a6554c2880fee553a01e426b8e2e",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "randombit/botan",
        "commits": [
            {
                "no": 196,
                "msg": "Fix test, catching wrong exception type",
                "url": "https://github.com/randombit/botan/commit/80821978c802606d93e51cc1f802e767d0e5a307",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            }
        ]
    },
    {
        "repo": "qt/qtbase",
        "commits": [
            {
                "no": 197,
                "msg": "Windows: Prevent potential \"crash\" in setApplicationBadge\n\nIn some circumstances our application badge code seems to throw an\nexception. The issue is hard to reproduce but just catching the\nexception ...",
                "url": "https://github.com/qt/qtbase/commit/6f995b5e246bd9cc56710fa9cebc6dbb7cb2b72f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "No such file or directory: '/home/gk/repos/2k-3k/qtbase-copies/197/build/src/gui/bus_interface.cpp'"
                    ]
                }
            },
            {
                "no": 198,
                "msg": "QNetworkInformation[Win]: Catch potential WinRT exceptions\n\nSome Windows SDKs seem to throw an exception from winrt::check_hresult()\nWe need to handle this accordingly. Catch the exception and print r...",
                "url": "https://github.com/qt/qtbase/commit/5564b166a3ea00e44053edbf7b8b41f5c9bf8c39",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "No such file or directory: '/home/gk/repos/2k-3k/qtbase-copies/198/build/src/opengl/OpenGL_autogen/mocs_compilation.cpp'"
                    ]
                }
            },
            {
                "no": 199,
                "msg": "QSystemLocale[Win]: Catch potential WinRT exceptions\n\nSome Windows SDKs seem to throw an exception from winrt::check_hresult()\nWe need to handle this accordingly.\n\nFixes: QTBUG-108605\nPick-to: 6.2 6.4...",
                "url": "https://github.com/qt/qtbase/commit/7d7ed24f517aff2f4bf9f2e32a29603476af6c88",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "No such file or directory: '/home/gk/repos/2k-3k/qtbase-copies/199/build/src/plugins/sqldrivers/mysql/QMYSQLDriverPlugin_autogen/mocs_compilation.cpp'"
                    ]
                }
            }
        ]
    },
    {
        "repo": "FISCO-BCOS/FISCO-BCOS",
        "commits": [
            {
                "no": 200,
                "msg": "fix the node exit with std::terminate when sdk connect the node with p2p-port (#2519)\n\n* catch the exception that may caused by invalid message\r\n\r\n* fix the node exit with std::terminate when sdk conn...",
                "url": "https://github.com/FISCO-BCOS/FISCO-BCOS/commit/f3eb801bbc0da7625668698cb34edf19a4e08414",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "solemnwarning/rehex",
        "commits": [
            {
                "no": 201,
                "msg": "Catch exceptions from Buffer::read_data()\n\nThis isn't a perfect fix - some places report the exception in an\nunobtrusive way (i.e. disassembly window contains error), some places\nreport it more obtrus...",
                "url": "https://github.com/solemnwarning/rehex/commit/00124dec38a8933cba700d273b4673cf0746a6ea",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "make-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "crawl/crawl",
        "commits": [
            {
                "no": 202,
                "msg": "fix: correctly handle map_load_exception for temple generation\n\nThis can happen if something is wrong with the des cache, or the des\nlocation. Without this fix it triggers uncaught exception behavior,...",
                "url": "https://github.com/crawl/crawl/commit/754df0dcc88a3512c5adf3ef99fdd4b73f3f1906",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 203,
                "msg": "Catch a few exceptions and die more precisely (PleasingFungus)\n\nWhen calling \"crawl -mapstat junk\", we should print the error message\nand exit normally, rather than crashing with \"terminate called aft...",
                "url": "https://github.com/crawl/crawl/commit/9e52518b4c18a5d708c3aefd63b9e9837d91523b",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 204,
                "msg": "Catch dgn_veto_exception when placing maps from lua\n\nWhen an exception is thrown across lua code, it severely messes with the\nlua stack and lua's use of setjmp/longjmp, at least for the way we have\nit...",
                "url": "https://github.com/crawl/crawl/commit/091e5a18feebe401102f8e255d12d97d8bf38492",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            }
        ]
    },
    {
        "repo": "leanprover/lean3",
        "commits": [
            {
                "no": 205,
                "msg": "fix(shell/lean): catch all exceptions\n\nFixes #1386.",
                "url": "https://github.com/leanprover/lean3/commit/61c380b534da2586aed0cb39d0d254f04d1f9ca6",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 206,
                "msg": "fix(library/module_mgr): gracefully handle exceptions during dependency discovery",
                "url": "https://github.com/leanprover/lean3/commit/130f80efff0535d404e48cab0e1fdd6d242152ea",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 207,
                "msg": "fix(shell/lua): catch lean exceptions in the leanlua frontend\n\nSigned-off-by: Leonardo de Moura <leonardo@microsoft.com>",
                "url": "https://github.com/leanprover/lean3/commit/1a734979b4e3666262b845ce83ba873a45137db6",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            }
        ]
    },
    {
        "repo": "MusicPlayerDaemon/MPD",
        "commits": [
            {
                "no": 208,
                "msg": "output/PipeWire: catch exceptions in ParamChanged()\n\nFixes a potential crash bug.",
                "url": "https://github.com/MusicPlayerDaemon/MPD/commit/9c3cf39fdd6904d7a80efc7f1f8ecb45991defdc",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 209,
                "msg": "decoder/openmpt: catch libopenmpt exceptions in scan_stream()\n\nFixes crash bug.",
                "url": "https://github.com/MusicPlayerDaemon/MPD/commit/5d359832980043c645be7327ed699dd821a005e1",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 210,
                "msg": "output/wasapi: SafeTry() catches all exceptions\n\nFixes crash due to std::stoul() throwing std::invalid_argument.",
                "url": "https://github.com/MusicPlayerDaemon/MPD/commit/17f7098e2754d916da6ee1e48909af8ab2f3e574",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            },
            {
                "no": 211,
                "msg": "playlist/Song: catch SongLoader exceptions\n\nFixes aborted \"load\" commands due to SongLoader failure.",
                "url": "https://github.com/MusicPlayerDaemon/MPD/commit/4f393553f487a5e4a2672be09833f69fce40db8c",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "make-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "ByConity/ByConity",
        "commits": [
            {
                "no": 212,
                "msg": "client: try catch for External table exceptions, couple of fixes [METR-10071]",
                "url": "https://github.com/ByConity/ByConity/commit/4ffc3fbdf7e8b320b96e937d46fe79c0918e281e",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            }
        ]
    },
    {
        "repo": "squid-cache/squid",
        "commits": [
            {
                "no": 213,
                "msg": "Fix URN response exception handling (#479)\n\nCID 1453857: Error handling issues (UNCAUGHT_EXCEPT)\n\nDue to various Store deficiencies, storeUnregister() might call swapout\ncode which Broadcast()s and th...",
                "url": "https://github.com/squid-cache/squid/commit/bd10977c21849a00a79f577485bc53871201214c",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "make-failed"
                    ]
                }
            },
            {
                "no": 214,
                "msg": "FtpServer.cc:1024: \"reply != NULL\" assertion\n\nHandle nil HttpReply pointer inside various handlers called from\nFtp::Server::handleReply(). For example, when the related StoreEntry\nobject is aborted, t...",
                "url": "https://github.com/squid-cache/squid/commit/0d253dfaed93ac3bf31a2fa72d28ca457628fe2d",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "make-failed"
                    ]
                }
            },
            {
                "no": 215,
                "msg": "Temporary fix: Avoid killing Coordinator with unregistered cache mgr actions\nthat cause isOpen() assertions.\n\nIf a worker forwards a cache manager request to Coordinator and Coordinator\ndoes not have ...",
                "url": "https://github.com/squid-cache/squid/commit/46a7dc66ead0e64123576d9760680fdc82b91875",
                "compile_commands_generation": {
                    "done": false,
                    "successful": false,
                    "notes": [
                        "make-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "NVIDIA/DALI",
        "commits": [
            {
                "no": 216,
                "msg": "Fix exception handling in BatchParallelDecoderImpl (#4262)\n\n* Catch errors thrown in task function in  decoder_parallel_impl.\r\n* Add tests that check:\r\n  - that parameters are properly propagated to D...",
                "url": "https://github.com/NVIDIA/DALI/commit/ef2e83af91def29707f0568afabd25796086a827",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Needs NVCC."
                    ]
                }
            },
            {
                "no": 217,
                "msg": "Fix libtiff error handling (#4274)\n\nTwo bug fixes:\r\n\r\n- Throwing in C code \r\nWhen using libtiff, I was passing a set of helper functions (read, seek etc.) for it to read the input. When invalid offset...",
                "url": "https://github.com/NVIDIA/DALI/commit/37cf3407cc64cfdf4e71bdf131beab90238464e6",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Needs NVCC."
                    ]
                }
            }
        ]
    },
    {
        "repo": "zcash/zcash",
        "commits": [
            {
                "no": 218,
                "msg": "rpcserver: attempt to fix uncaught exception.",
                "url": "https://github.com/zcash/zcash/commit/8db17607510eb250f3faf7963affa337eb7039d5",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Compilation has errors."
                    ]
                }
            }
        ]
    },
    {
        "repo": "cuberite/cuberite",
        "commits": [
            {
                "no": 219,
                "msg": "MultiVersionProtocol: fix two crashes\n\nFirst one: add missing exception handler in ProcessProtocolIn\n\nSecond: remove faulty logic dealing with incomplete packets.\n\n`a_Data = a_Data.substr(m_Buffer.Get...",
                "url": "https://github.com/cuberite/cuberite/commit/49ef21d6505c76fb26d50c99934e801ba6016049",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has a lot of errors, mostly from the fmt library."
                    ]
                }
            }
        ]
    },
    {
        "repo": "CGAL/cgal",
        "commits": [
            {
                "no": 220,
                "msg": "Fix uncaught exception in HalfedgeDS_list.h",
                "url": "https://github.com/CGAL/cgal/commit/1373150f1da4ad94ac12890b682688a2dca6e1f4",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "header-only library"
                    ]
                }
            },
            {
                "no": 221,
                "msg": "Fix uncaught exception in Handle_for.h",
                "url": "https://github.com/CGAL/cgal/commit/48831abecee904e24303485b1b37653a6b4c98a7",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "header-only library"
                    ]
                }
            },
            {
                "no": 222,
                "msg": "Fix uncaught exception in Sphere_map.h",
                "url": "https://github.com/CGAL/cgal/commit/35c148078ce711321d7c557319d8516a3028c8fc",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "header-only library"
                    ]
                }
            },
            {
                "no": 223,
                "msg": "Fix uncaught exception in K3_tree.h",
                "url": "https://github.com/CGAL/cgal/commit/96024d1bb1bea1e98fc49808fa70c9f7cc3c8873",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "header-only library"
                    ]
                }
            },
            {
                "no": 224,
                "msg": "Fix uncaught exception in In_place_list.h",
                "url": "https://github.com/CGAL/cgal/commit/e7aebc424ec965a2e5231edfaf517d6c62e74831",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "header-only library"
                    ]
                }
            },
            {
                "no": 225,
                "msg": "Fix uncaught exception in SNC_point_locator.h",
                "url": "https://github.com/CGAL/cgal/commit/ce26378d5431dd1f89eb482fef246edd11ec1d6f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "header-only library"
                    ]
                }
            },
            {
                "no": 226,
                "msg": "Fix uncaught exception in Nef_polyhedron_S2.h",
                "url": "https://github.com/CGAL/cgal/commit/e222a423aff1070ae92d0e443bd3459b19620f9d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "header-only library"
                    ]
                }
            },
            {
                "no": 227,
                "msg": "Fix uncaught exception in VRML_2_ostream.h",
                "url": "https://github.com/CGAL/cgal/commit/9d442f26c783a6e3416c3b5b2d56b0ec28ffe3d4",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "header-only library"
                    ]
                }
            }
        ]
    },
    {
        "repo": "OSGeo/gdal",
        "commits": [
            {
                "no": 228,
                "msg": "PCIDSK: fix issues with uncaught exceptions in destructors (CID 1378798, 1378790, 1378797, 1378800)\n\ngit-svn-id: https://svn.osgeo.org/gdal/trunk@39709 f0d54148-0727-0410-94bb-9a71ac55c965",
                "url": "https://github.com/OSGeo/gdal/commit/665b5e05af88b596b614e6e8267c28f1d971cc0c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "configure.ac has problems, even after running autoupdate."
                    ]
                }
            },
            {
                "no": 229,
                "msg": "ILI2: fix crash due to unhandled exception. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=2191. Credit to OSS Fuzz\n\ngit-svn-id: https://svn.osgeo.org/gdal/trunk@39033 f0d54148-0727-0410-...",
                "url": "https://github.com/OSGeo/gdal/commit/b94c50354cd13f10ef54ed6345e6775cee60ecf0",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "configure.ac has problems, even after running autoupdate."
                    ]
                }
            }
        ]
    },
    {
        "repo": "love2d/love",
        "commits": [
            {
                "no": 230,
                "msg": "Catch possible Box2D exception in Fixture:getBoundingBox() (fixes #1196)",
                "url": "https://github.com/love2d/love/commit/0ce44e465dad292d41f9746d9c10d6fce79d322b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "find src/libraries/luasocket/libluasocket/ -type f -exec sed -i 's/luaL_reg/luaL_Reg/g' {} +",
                        "Then compilation succeeds."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[love]::[physics]::[box2d]::Fixture::getBoundingBox",
                        "loc": "/home/gk/repos/3k-5k/love-copies/230/src/modules/physics/box2d/Fixture.cpp:287:24",
                        "callee": "b2Fixture::GetAABB",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 231,
                "msg": "catch a possible Box2D exception in setMassData (fixes issue #342)",
                "url": "https://github.com/love2d/love/commit/f00b5f03f233171ff3089f510e61935793705f63",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Needs to run 'platform/unix/automagic', then './configure' and 'make'.",
                        "Some OpenGL functions are called but undeclared. These functions are declared in <GL/glext.h> but the project prevents including it. I don't know why."
                    ]
                }
            }
        ]
    },
    {
        "repo": "LibreSprite/LibreSprite",
        "commits": [
            {
                "no": 232,
                "msg": "Fix issue 366: Crash (uncaught exception) on closing application",
                "url": "https://github.com/LibreSprite/LibreSprite/commit/45f01665084e16b444098d60a05866e277332264",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Compilation has errors, but it does not affect the analysis."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[base]::TempDir::~TempDir",
                        "loc": "/home/gk/repos/3k-5k/LibreSprite-copies/232/src/base/temp_dir.cpp:41:5",
                        "callee": "[base]::remove_directory",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        31,
                        32
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[base]::TempDir::attach",
                        "loc": "/home/gk/repos/3k-5k/LibreSprite-copies/232/src/base/temp_dir.cpp:47:5",
                        "callee": "[base]::remove_directory",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        31,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 233,
                "msg": "Fix crash in Editor::drawOneSpriteUnclippedRect() (issue 361)\n\nWe've to catch std::bad_alloc exceptions.",
                "url": "https://github.com/LibreSprite/LibreSprite/commit/eb7016bede161fac256aa867103525c7955db097",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Compilation has errors, but it does not affect the analysis."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[app]::Editor::drawOneSpriteUnclippedRect",
                        "loc": "/home/gk/repos/3k-5k/LibreSprite-copies/233/src/app/ui/editor/editor.cpp:389:21",
                        "callee": "[app]::RenderEngine::renderSprite",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        25,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "NatronGitHub/Natron",
        "commits": [
            {
                "no": 234,
                "msg": "Fix uncaught exception",
                "url": "https://github.com/NatronGitHub/Natron/commit/2eab69a44e774edcd2f8ca9089eed14a101153c1",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "requires qt4.8.6 and qmake."
                    ]
                }
            },
            {
                "no": 235,
                "msg": "fix uncaught exception",
                "url": "https://github.com/NatronGitHub/Natron/commit/66174f9ee0e12a43f54fc99cf4625de05b4cb0ed",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "requires qt4.8.6 and qmake."
                    ]
                }
            },
            {
                "no": 236,
                "msg": "fix uncaught exception",
                "url": "https://github.com/NatronGitHub/Natron/commit/84ae40c7882e5060cefd26d486b7f53d98fcc2ee",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "requires qt4.8.6 and qmake."
                    ]
                }
            },
            {
                "no": 237,
                "msg": "Fix uncaught exception + crash",
                "url": "https://github.com/NatronGitHub/Natron/commit/cfbefc6fb31faf35fb76933588e1f44c73a5dafc",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "requires qt4.8.6 and qmake."
                    ]
                }
            }
        ]
    },
    {
        "repo": "XRPLF/rippled",
        "commits": [
            {
                "no": 238,
                "msg": "fix(gateway_balances): handle overflow exception: (#4355)\n\n* Prevent internal error by catching overflow exception in `gateway_balances`.\r\n* Treat `gateway_balances` obligations overflow as max (large...",
                "url": "https://github.com/XRPLF/rippled/commit/10555faa928bc02400c22f1856ad1846b5d52f1a",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Has unmet dependencies.",
                        "The doc gives a complicated procedure to build the project, which requires conan and cmake. But the conan commands in the doc are not valid in current version of conan. I don't know how to deal with it."
                    ]
                }
            }
        ]
    },
    {
        "repo": "arrayfire/arrayfire",
        "commits": [
            {
                "no": 239,
                "msg": "Fixing error handling in seqToDims\n\n- It was previously catching the wrong exception.",
                "url": "https://github.com/arrayfire/arrayfire/commit/e0e57e048c4dae92b14e70677f7cdd01d7c5959a",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "After fixing all the bugs (missing 'af::') in tests/, compilation succeeds.",
                        "calcDim has 'DIM_ASSERT', which throws DimensionError.",
                        "DimensionError --> AFError --> std::logic_error",
                        "That's why it catches std::logic_error."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[af]::seqToDims",
                        "loc": "/home/gk/repos/3k-5k/arrayfire-copies/239/src/api/cpp/array.cpp:49:32",
                        "callee": "[af]::calcDim",
                        "exception": "std::logic_error (New!)"
                    },
                    "Context": [
                        31
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "The-Powder-Toy/The-Powder-Toy",
        "commits": [
            {
                "no": 240,
                "msg": "Fix uncaught exception in console when trying to parse invalid numbers",
                "url": "https://github.com/The-Powder-Toy/The-Powder-Toy/commit/46cd49ba244a465d51ae6454cc4b2b6935844818",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "bear -- scons -j16"
                    ]
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "TPTScriptInterface::parseNumber",
                        "loc": "src/lua/TPTScriptInterface.cpp:153:14",
                        "callee": "String::ToNumber",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "mapbox/mapbox-gl-native",
        "commits": [
            {
                "no": 241,
                "msg": "[core] Improve OfflineDatabase error handling\n\n- fixes missing exception handlers (e.g. runtim error from the `initialize()` method)\n- introduces generic exception handling mechanism to reduce the rep...",
                "url": "https://github.com/mapbox/mapbox-gl-native/commit/e1556fc539607db626b978040895716c1564c9b9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has a ton of errors. After I tried my best, platform/node/src/node*.cpp still have errors, but I think they do not affect our analysis."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::OfflineDatabase",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:19:9",
                        "callee": "[mbgl]::OfflineDatabase::initialize",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::cleanup",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:81:20",
                        "callee": "[std]::unordered_map::clear",
                        "exception": "..."
                    },
                    "Context": [
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::get",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:210:19",
                        "callee": "[mbgl]::OfflineDatabase::getInternal",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::put",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:240:9",
                        "callee": "[mbgl]::OfflineDatabase::initialize",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::put",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:248:19",
                        "callee": "[mbgl]::OfflineDatabase::putInternal",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_6": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::put",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:249:17",
                        "callee": "[mapbox]::[sqlite]::Transaction::commit",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_7": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::invalidateAmbientCache",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:644:38",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_8": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::invalidateAmbientCache",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:656:42",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_9": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::clearAmbientCache",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:675:38",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_10": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::clearAmbientCache",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:686:42",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_11": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::clearAmbientCache",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:696:5",
                        "callee": "[mbgl]::OfflineDatabase::vacuum",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_12": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::invalidateRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:720:46",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_13": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::invalidateRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:707:42",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_14": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::invalidateRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:730:23",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_15": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::invalidateRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:717:19",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_16": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::clearAmbientCache",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:683:15",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_17": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::clearAmbientCache",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:694:19",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_18": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::invalidateAmbientCache",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:653:15",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_19": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::invalidateAmbientCache",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:665:19",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_20": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::listRegions",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:743:18",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_21": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::createRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:768:34",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_22": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::createRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:775:11",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_23": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::updateMetadata",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:861:34",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_24": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::updateMetadata",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:867:11",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_25": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::deleteRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:877:38",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_26": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::deleteRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:879:15",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_27": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::deleteRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:882:5",
                        "callee": "[mbgl]::OfflineDatabase::evict",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_28": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::deleteRegion",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:884:5",
                        "callee": "[mbgl]::OfflineDatabase::vacuum",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_29": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::getRegionResource",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:895:12",
                        "callee": "[mbgl]::OfflineDatabase::getInternal",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_30": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::hasRegionResource",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:902:12",
                        "callee": "[mbgl]::OfflineDatabase::hasInternal",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_31": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::putRegionResource",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:912:9",
                        "callee": "[mbgl]::OfflineDatabase::initialize",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_32": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::putRegionResource",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:915:17",
                        "callee": "[mbgl]::OfflineDatabase::putRegionResourceInternal",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_33": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::putRegionResource",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:916:17",
                        "callee": "[mapbox]::[sqlite]::Transaction::commit",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_34": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::putRegionResources",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:958:17",
                        "callee": "[mapbox]::[sqlite]::Transaction::commit",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_35": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::putRegionResources",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:952:25",
                        "callee": "[mapbox]::[sqlite]::Transaction::commit",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_36": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::putRegionResources",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:927:9",
                        "callee": "[mbgl]::OfflineDatabase::initialize",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_37": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::putRegionResources",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:943:37",
                        "callee": "[mbgl]::OfflineDatabase::putRegionResourceInternal",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_38": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::getRegionDefinition",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1068:34",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_39": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::getRegionDefinition",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1070:11",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_40": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::getRegionDefinition",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1072:12",
                        "callee": "[nonstd]::[expected_lite]::expected::expected",
                        "exception": "..."
                    },
                    "Context": [
                        9,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_41": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::getRegionCompletedStatus",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1087:11",
                        "callee": "[mbgl]::OfflineDatabase::getCompletedResourceCountAndSize",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_42": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::getRegionCompletedStatus",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1089:11",
                        "callee": "[mbgl]::OfflineDatabase::getCompletedTileCountAndSize",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_43": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::setMaximumAmbientCacheSize",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1227:15",
                        "callee": "[mbgl]::OfflineDatabase::getPragma",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_44": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::setMaximumAmbientCacheSize",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1226:33",
                        "callee": "[mbgl]::OfflineDatabase::getPragma",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_45": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::setMaximumAmbientCacheSize",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1230:13",
                        "callee": "[mbgl]::OfflineDatabase::evict",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_46": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::setMaximumAmbientCacheSize",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1231:13",
                        "callee": "[mbgl]::OfflineDatabase::vacuum",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_47": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::getOfflineMapboxTileCount",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1266:34",
                        "callee": "[mbgl]::OfflineDatabase::getStatement",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_48": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::getOfflineMapboxTileCount",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1273:11",
                        "callee": "[mapbox]::[sqlite]::Query::run",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_49": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::markUsedResources",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1290:9",
                        "callee": "[mbgl]::OfflineDatabase::initialize",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_50": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::markUsedResources",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1294:9",
                        "callee": "[mbgl]::OfflineDatabase::markUsed",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_51": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::markUsedResources",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1296:17",
                        "callee": "[mapbox]::[sqlite]::Transaction::commit",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_52": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::put",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:247:33",
                        "callee": "[mapbox]::[sqlite]::Transaction::Transaction",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_53": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::putRegionResource",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:914:33",
                        "callee": "[mapbox]::[sqlite]::Transaction::Transaction",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_54": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::putRegionResources",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:929:33",
                        "callee": "[mapbox]::[sqlite]::Transaction::Transaction",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_55": {
                    "Info": {
                        "caller": "[mbgl]::OfflineDatabase::markUsedResources",
                        "loc": "/home/gk/repos/3k-5k/mapbox-gl-native-copies/241/platform/default/src/mbgl/storage/offline_database.cpp:1292:33",
                        "callee": "[mapbox]::[sqlite]::Transaction::Transaction",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "lief-project/LIEF",
        "commits": [
            {
                "no": 242,
                "msg": "fix to handle exceptions in json_dump of ResourcesManager",
                "url": "https://github.com/lief-project/LIEF/commit/a1521128e19addea2abbf7be6ab1d56bccf5302c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Compilation has many errors, but they can be fixed or eliminated without affecting call-graph."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[LIEF]::[PE]::JsonVisitor::visit",
                        "loc": "/home/gk/repos/3k-5k/LIEF-copies/242/src/PE/json.cpp:489:49",
                        "callee": "[LIEF]::[PE]::ResourcesManager::manifest",
                        "exception": "c:@N@LIEF@S@exception"
                    },
                    "Context": [
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[LIEF]::[PE]::JsonVisitor::visit",
                        "loc": "/home/gk/repos/3k-5k/LIEF-copies/242/src/PE/json.cpp:494:39",
                        "callee": "[LIEF]::[PE]::ResourcesManager::version",
                        "exception": "c:@N@LIEF@S@exception"
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "[LIEF]::[PE]::JsonVisitor::visit",
                        "loc": "/home/gk/repos/3k-5k/LIEF-copies/242/src/PE/json.cpp:500:55",
                        "callee": "[LIEF]::[PE]::ResourcesManager::icons",
                        "exception": "c:@N@LIEF@S@exception"
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "[LIEF]::[PE]::JsonVisitor::visit",
                        "loc": "/home/gk/repos/3k-5k/LIEF-copies/242/src/PE/json.cpp:510:59",
                        "callee": "[LIEF]::[PE]::ResourcesManager::dialogs",
                        "exception": "c:@N@LIEF@S@exception"
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "mindspore-ai/mindspore",
        "commits": [
            {
                "no": 243,
                "msg": "!58482 Catch Exception for  function of sto*\nMerge pull request !58482 from jiaorui/fix-exception",
                "url": "https://github.com/mindspore-ai/mindspore/commit/c9cca66ad08e43df062787334999eb87a5c9409a",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has too many errors. I have already removed '-Werror' but there are still many errors."
                    ]
                }
            },
            {
                "no": 244,
                "msg": "fix candump and catch exception of stoi",
                "url": "https://github.com/mindspore-ai/mindspore/commit/aca03c071dfcabc8e0c2f224550c19ee0bb5fddb",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Same as 243."
                    ]
                }
            }
        ]
    },
    {
        "repo": "rime/weasel",
        "commits": [
            {
                "no": 245,
                "msg": "fix: if IPC serialization exception happens, client app would crash cause not exception handle provided.",
                "url": "https://github.com/rime/weasel/commit/369834c073140f1a02eb7fad6757c51e85964f7f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Windows project."
                    ]
                }
            }
        ]
    },
    {
        "repo": "vcmi/vcmi",
        "commits": [
            {
                "no": 246,
                "msg": "Fix possible uncaught exception",
                "url": "https://github.com/vcmi/vcmi/commit/26bddbac446442852cc3a260841d28736285ec01",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[vstd]::getFormattedDateTime",
                        "loc": "/home/gk/repos/3k-5k/vcmi-copies/246/lib/vstd/DateUtils.cpp:13:5",
                        "callee": "[std]::basic_ios::imbue",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "Xaymar/obs-StreamFX",
        "commits": [
            {
                "no": 247,
                "msg": "source-mirror: Handle uncaught exceptions in C callbacks\n\nFixes various crashes and undefined behavior due to exceptions falling into C code where they now wreak havoc with the current stack.",
                "url": "https://github.com/Xaymar/obs-StreamFX/commit/4c44496b87b0bbb888b4a411b9d0de0a471070cb",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "notes": [
                        "The callees are C functions, which won't throw exceptions."
                    ]
                }
            },
            {
                "no": 248,
                "msg": "source-mirror: Fix crashes caused by uncaught exception",
                "url": "https://github.com/Xaymar/obs-StreamFX/commit/9ae8ecc3e1b1b6aac3829653cccf626ae7c02f66",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "It requires setting PATH_OBSStudio.",
                        "I downloaded the source tree of obs-studio in /home/gk/Libraries/Sources/obs-studio.",
                        "It then wants to find obs-studio/cmake/external/findLibObs.cmake, but this file does not exist in the entire project at all."
                    ]
                }
            }
        ]
    },
    {
        "repo": "Ardour/ardour",
        "commits": [
            {
                "no": 249,
                "msg": "Wrap calls to add_shortcut_folder() in try { ... } block.\n\nGtk::FileChooserButton::add_shortcut_folder() throws a Glib::Error\nexception if the folder being added already has a shortcut, causing the\n'N...",
                "url": "https://github.com/Ardour/ardour/commit/5ccd13ea789b8b6bffe292565ce793ebc616fcd2",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "python2.7 waf configure && bear -- python2.7 waf",
                        "Compilation has errors."
                    ]
                }
            },
            {
                "no": 250,
                "msg": "Wrap calls to add_shortcut_folder() in try { ... } block.\n\nGtk::FileChooserButton::add_shortcut_folder() throws a Glib::Error\nexception if the folder being added already has a shortcut, causing the\n'N...",
                "url": "https://github.com/Ardour/ardour/commit/bf408d60c896d1a072a353f79269ac3bc1600464",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "python2.7 waf configure && bear -- python2.7 waf",
                        "Compilation has errors."
                    ]
                }
            }
        ]
    },
    {
        "repo": "spring/spring",
        "commits": [
            {
                "no": 251,
                "msg": "* Fix unitsync python bindings crash.\n* Catch all exceptions derived from std::exception, instead of just TdfParser::parse_error.\n\n\n\ngit-svn-id: https://spring.clan-sy.com/svn/spring/trunk@997 3797743...",
                "url": "https://github.com/spring/spring/commit/d72b6cef60c30a05c2363a7de0ce9591f5099332",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "I did not find how to build. Maybe it uses scons, but I tried scons and failed with \"FileNotFoundError\"."
                    ]
                }
            }
        ]
    },
    {
        "repo": "PowerDNS/pdns",
        "commits": [
            {
                "no": 252,
                "msg": "ixfrdist: Fix Coverity CID 1504137: Uncaught exception",
                "url": "https://github.com/PowerDNS/pdns/commit/f84b2bc7dfbb03ab9d88695503b82ba09909047a",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Run 'autoreconf -vi' first, then './configure' and 'make'.",
                        "Errors occur in the docs folder. I renamed docs to docs.bak, and created a docs folder with only an empty Makefile in it."
                    ]
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "The file that contains the fix does not exist in compile_commands.json, which I don't know why.",
                        "After examining compile_commands.json, I added the compile commands for that file manually to make cg-analyzer work."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "parseConfiguration",
                        "loc": "ixfrdist.cc:1356:29",
                        "callee": "NetmaskGroup::addMask",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        1,
                        2
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "parseConfiguration",
                        "loc": "ixfrdist.cc:1355:29",
                        "callee": "NetmaskGroup::addMask",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        1,
                        2
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "parseConfiguration",
                        "loc": "ixfrdist.cc:1361:33",
                        "callee": "NetmaskGroup::addMask",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        1,
                        4,
                        6,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 253,
                "msg": "calidns: Fix Coverity CID 1401679: Uncaught exception",
                "url": "https://github.com/PowerDNS/pdns/commit/699fac79855b7b520a6bf84cf647668668d87d1d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Run 'autoreconf -vi' first, then './configure' and 'make'.",
                        "Similar to 252. Removing the docs folder completely will lead to an error. I left a file needed there to silence the error."
                    ]
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Similar to 252.",
                        "Moreover, cg-driver seems to have problems with 'main' (known bug). I renamed main to main_ in the source code, and then it worked."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "main",
                        "loc": "calidns.cc:379:20",
                        "callee": "Netmask::Netmask",
                        "exception": "c:@S@NetmaskException"
                    },
                    "Context": [
                        1,
                        2
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 254,
                "msg": "auth: Fix 'exceptions not caught' warnings from Coverity",
                "url": "https://github.com/PowerDNS/pdns/commit/0d757bd2ccf0150e69ae630fdc1f78e998114205",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Same as 253.",
                        "I'm unable to determine where the exception caught by line 1473 comes from."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "main",
                        "loc": "auth-main.cc:1491:18",
                        "callee": "ArgvMap::mustDo",
                        "exception": "c:@S@PDNSException"
                    },
                    "Context": [
                        2
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "main",
                        "loc": "auth-main.cc:1496:18",
                        "callee": "ArgvMap::mustDo",
                        "exception": "c:@S@PDNSException"
                    },
                    "Context": [
                        2
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 255,
                "msg": "fix up dnspcap2protobuf htons plus catch exception",
                "url": "https://github.com/PowerDNS/pdns/commit/1b448d84067826c9b0a10998f862415d5067a116",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Some problems with OpenSSL."
                    ]
                }
            },
            {
                "no": 256,
                "msg": "dnsdist: Fix minor issues reported by Coverity\n\nOne useless test due to the condition being always true,\nand one uncatched exception if we ever try to get the handle of a\nnon-established TCP connectio...",
                "url": "https://github.com/PowerDNS/pdns/commit/33d01bbdc7a5dfa934223c0cadae72988a5de8bd",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Same as 253."
                    ]
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Same as 252."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "IncomingTCPConnectionState::~IncomingTCPConnectionState",
                        "loc": "dnsdist-tcp.cc:433:72",
                        "callee": "TCPConnectionToBackend::getHandle",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        9,
                        32
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "IncomingTCPConnectionState::~IncomingTCPConnectionState",
                        "loc": "dnsdist-tcp.cc:436:94",
                        "callee": "TCPConnectionToBackend::getHandle",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        9,
                        32
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "IncomingTCPConnectionState::~IncomingTCPConnectionState",
                        "loc": "dnsdist-tcp.cc:432:93",
                        "callee": "TCPConnectionToBackend::getHandle",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        9,
                        32
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "IncomingTCPConnectionState::~IncomingTCPConnectionState",
                        "loc": "dnsdist-tcp.cc:437:73",
                        "callee": "TCPConnectionToBackend::getHandle",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        9,
                        32
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "citizenfx/fivem",
        "commits": [
            {
                "no": 257,
                "msg": "fix(server/impl): catch exceptions during handover parse\n\nAs with the previous commit, code might be storing invalid JSON for some\nreason.",
                "url": "https://github.com/citizenfx/fivem/commit/13ace85c8590b059486e5d2a3dce955c2fad16ed",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Windows project."
                    ]
                }
            },
            {
                "no": 258,
                "msg": "resources/client: RCDv2: fix variant cast copy/paste error, add try/catch to figure out other exception",
                "url": "https://github.com/citizenfx/fivem/commit/9afd4aa53bf550ebdf0fbd49248239ead960223f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Windows project."
                    ]
                }
            }
        ]
    },
    {
        "repo": "facebookincubator/velox",
        "commits": [
            {
                "no": 259,
                "msg": "Handle exception thrown in ExprSet's destructor (#3583)\n\nSummary:\nThis adds handling  of the aforementioned exception that prevented stats\nfrom successfully propagating  when an ExprSet object is dest...",
                "url": "https://github.com/facebookincubator/velox/commit/5261735d5bb0c9e7932b06ab4a4a58dbb797e833",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "CMake configuration has some slight error. I solved it by adding a dummy source file and doing some slight modification."
                    ]
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "I fixed a ton of compilation errors.",
                        "Then I encountered jsondecodeerror when running cg-driver."
                    ]
                }
            },
            {
                "no": 260,
                "msg": "Fix ExceptionContext to handle messageFunc that throws (#2578)\n\nSummary:\nThe messageFunc callback may throw, triggering the exception handling path that\ncalls it again, then again, then again,.. Add l...",
                "url": "https://github.com/facebookincubator/velox/commit/e7b7908ff6b94d4aa3ba350cafbf6d40bc7e44a9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Run CMake with '-Dfolly_DIR=/home/gk/Libraries/Installed/folly/lib/cmake/folly'."
                    ]
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Same as 259."
                    ]
                }
            }
        ]
    },
    {
        "repo": "facebook/mcrouter",
        "commits": [
            {
                "no": 261,
                "msg": "Fix McStatsRequest sent through libmcrouter\n\nSummary:\nThis fixes a bug when sending McStatsRequest sent to libmcrouter.\nWe were trying to create a std::string from nullptr (because commandargs stat\nwa...",
                "url": "https://github.com/facebook/mcrouter/commit/177df38c93555c750b4b39c1ced5f91d27fb923a",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "./configure should be run with LDFLAGS=\"-L/home/gk/Libraries/Installed/folly/lib -L/home/gk/Libraries/Installed/wangle/lib\" CPPFLAGS=\"-I/home/gk/Libraries/Installed/folly/include -I/home/gk/Libraries/Installed/wangle/include\".",
                        "Compilation has a lot of errors."
                    ]
                }
            }
        ]
    },
    {
        "repo": "facebookarchive/beringei",
        "commits": [
            {
                "no": 262,
                "msg": "correctly process the case when we fail listing completed block files\n\nSummary:\nIn BucketMap::readData() we're calling findCompletedBlockFiles() which uses boost::filesystem::directory_iterator to lis...",
                "url": "https://github.com/facebookarchive/beringei/commit/2026c914ffd3cd6846ef7b1969069e9a44961e0b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "The library finding parts in the CMake files are completely a mess. I defined several variables to make generation done, but I don't know if the building process will be successful."
                    ]
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has an error which I don't know how to fix."
                    ]
                }
            }
        ]
    },
    {
        "repo": "Warzone2100/warzone2100",
        "commits": [
            {
                "no": 263,
                "msg": "parseJsonFile: Fix memory leak, handle exceptions",
                "url": "https://github.com/Warzone2100/warzone2100/commit/464f627476d529dfbe951b5b34364a29e10ca5b0",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "parseJsonFile",
                        "loc": "/home/gk/repos/3k-5k/warzone2100-copies/263/src/game.cpp:4990:9",
                        "callee": "[nonstd]::[optional_lite]::optional::optional",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "qgis/QGIS",
        "commits": [
            {
                "no": 264,
                "msg": "Catch exceptions when trying to load cpp plugins\n\nFixes crash when showing the plugin manager when a cpp plugin\nraises an unhandled exception",
                "url": "https://github.com/qgis/QGIS/commit/a8ac2027da36516ef876cb465965e6c8f4342f4d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 265,
                "msg": "Fix uncaught exception when calculating full extent (fixes #40683)",
                "url": "https://github.com/qgis/QGIS/commit/b331c79592ad8073ab1e29ce6ea9cd92b00edc73",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "There are some bugs in cmake/FindGDAL.cmake and cmake/FindLibPython.py. I have fixed them.",
                        "Run CMake with '-DPROJ_INCLUDE_DIR=/home/gk/Libraries/Installed/proj-4.9.3/include'."
                    ]
                }
            },
            {
                "no": 266,
                "msg": "fix unhandled proj exception from vector tiles",
                "url": "https://github.com/qgis/QGIS/commit/e28ff6f84b99e9b91171184a5cd8080b72c07275",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "There are some bugs in cmake/FindGDAL.cmake and cmake/FindLibPython.py. I have fixed them.",
                        "Run CMake with '-DPROJ_INCLUDE_DIR=/home/gk/Libraries/Installed/proj-4.9.3/include'."
                    ]
                }
            },
            {
                "no": 267,
                "msg": "[quick] Fix unhandled exception in QgsQuickPositionKit",
                "url": "https://github.com/qgis/QGIS/commit/154c8923c995e85fa873e61256d24d5797eb68fa",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "There are some bugs in cmake/FindGDAL.cmake and cmake/FindLibPython.py. I have fixed them.",
                        "Run CMake with '-DPROJ_INCLUDE_DIR=/home/gk/Libraries/Installed/proj-4.9.3/include'."
                    ]
                }
            },
            {
                "no": 268,
                "msg": "Catch some reprojection exceptions during raster rendering\n\nFixes #32301",
                "url": "https://github.com/qgis/QGIS/commit/1dfc0c1e4eb8be26bb7214e3978aa6d80974c221",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "There are some bugs in cmake/FindGDAL.cmake and cmake/FindLibPython.py. I have fixed them.",
                        "Run CMake with '-DPROJ_INCLUDE_DIR=/home/gk/Libraries/Installed/proj-4.9.3/include'."
                    ]
                }
            },
            {
                "no": 269,
                "msg": "Fix uncaught transform exception when determining AFS layer bounds",
                "url": "https://github.com/qgis/QGIS/commit/857697dd9919e80fc03e0c2059e56ce7311e9b49",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "There are some bugs in cmake/FindGDAL.cmake and cmake/FindLibPython.py. I have fixed them.",
                        "Run CMake with '-DPROJ_INCLUDE_DIR=/home/gk/Libraries/Installed/proj-4.9.3/include'."
                    ]
                }
            },
            {
                "no": 270,
                "msg": "Fix some uncaught transform exceptions",
                "url": "https://github.com/qgis/QGIS/commit/e952fe84374b593d6b88d576d4bafa51aeacca69",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Similar to the above, but it requires PyQt4, which seems not installable."
                    ]
                }
            },
            {
                "no": 271,
                "msg": "Coverity fixes (uninitialised members, uncaught exceptions)",
                "url": "https://github.com/qgis/QGIS/commit/2481ce63e63754954d0f1cbac5e1bb6c9ee93adc",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 270"
                    ]
                }
            },
            {
                "no": 272,
                "msg": "catch transformation exceptions in pal labeling (fixes #7730)",
                "url": "https://github.com/qgis/QGIS/commit/683149848407c84523fb45cc2ae6b360acb5f89d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 270"
                    ]
                }
            },
            {
                "no": 273,
                "msg": "catch more GEOS exceptions, fixes #802\n\ngit-svn-id: http://svn.osgeo.org/qgis/trunk@7394 c8812cc2-4d05-0410-92ff-de0c093fc19c",
                "url": "https://github.com/qgis/QGIS/commit/e61a03ccd1a1d46e0f5e94393c4455a12c255483",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 270"
                    ]
                }
            },
            {
                "no": 274,
                "msg": "Catch CRS exception for invalid point and handle as if nothing was selected rather than crashing. This can occur if a world map is projected onto a globe and then clicking somewhere off the globe. Fix...",
                "url": "https://github.com/qgis/QGIS/commit/5facf32f5cfd6d0605d488eb8064adb87ce685af",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Requires PyQt4 which is not found, but no error.",
                        "'-DPROJ_INCLUDE_DIR=/home/gk/Libraries/Installed/proj-4.9.3/include' is still needed."
                    ]
                }
            }
        ]
    },
    {
        "repo": "openframeworks/openFrameworks",
        "commits": [
            {
                "no": 275,
                "msg": "ofURLFileLoader: catch exceptions as const, try to catch all exceptions. trying to fix #1344",
                "url": "https://github.com/openframeworks/openFrameworks/commit/d247f71a28747991b4c9df5dd001797fba38bf9a",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "unknown",
                        "unknown"
                    ]
                }
            },
            {
                "no": 276,
                "msg": "ofThread: fix thread join\n\nSometimes when trying to join a thread that has already been detached\npoco throws an exception. This catches it so the app doesn't crash",
                "url": "https://github.com/openframeworks/openFrameworks/commit/14d58794b3c2b466b6693a989b29f05771b857db",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "unknown",
                        "unknown"
                    ]
                }
            }
        ]
    },
    {
        "repo": "Studio3T/robomongo",
        "commits": [
            {
                "no": 277,
                "msg": "Importan fix: Catching exception instead of runtime_error in MongoWorker. This fixes crash problem when creating db with a string which contains whitespace.",
                "url": "https://github.com/Studio3T/robomongo/commit/8078ccc8db4a8212833a2247c779eb7545d4a90e",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "TrinityCore/TrinityCore",
        "commits": [
            {
                "no": 278,
                "msg": "Tools/MapExtractor: Fix crash when passing an invalid input path\n\nFix unhandled exception happening when passing an invalid path as -i argument.",
                "url": "https://github.com/TrinityCore/TrinityCore/commit/4ba22c5eafdad2094b553c206c1dc1f30448d049",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "redpanda-data/redpanda",
        "commits": [
            {
                "no": 279,
                "msg": "cluster: Catch replicate exceptions eviction_stm\n\n- Replicate may throw in the case the gate belonging to the consensus\nclass has closed. The eviction_stm never had proper exception handling\nto cover ...",
                "url": "https://github.com/redpanda-data/redpanda/commit/95537624795449a482e6aa5dfb2e959dbe202293",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 280,
                "msg": "archival: fix abandoned exceptional future\n\nCare must be taken when using seastar::when_all because the resulting\nset of available futures may contain failed futures that also need to be\nhandled. Here...",
                "url": "https://github.com/redpanda-data/redpanda/commit/73b8f682d25b920a68fbb1faf11dfaf0c986aa79",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 281,
                "msg": "net: Ensure server catches all thrown exceptions\n\n- The method `is_disconnect_exception` throws an exception that may be\nof any type, and only handles a few cases. In the case the exception is\nnot han...",
                "url": "https://github.com/redpanda-data/redpanda/commit/661a1be4744502f35e467177e05ea1018e17d638",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 282,
                "msg": "cloud_storage: fix segment download when dir is deleted\n\nThis logic was basically already there, but the directory\ncreation was happening outside the exception handler.\n\nThis fixes a case where remote...",
                "url": "https://github.com/redpanda-data/redpanda/commit/74651fcd710d0e2703f121ac931342a64d6a82dd",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 283,
                "msg": "coproc: Handle non_rep_topic_creation_exc\n\n- This exception may occur if for some reason the controller returns\nsome error when attempting to create the non_replicable_topic\n\n- Fixes #3179",
                "url": "https://github.com/redpanda-data/redpanda/commit/ae556fa8794c64a1603dc3a8bdbb437d0e66f7e9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 284,
                "msg": "consensus: fix expected condition variable exception\n\nThe Seastar docs[1] say wait() returns condition_variable_timed_out, not\ntimed_out_error. This resulted in error logs like:\n\n```\nINFO  2022-07-29 ...",
                "url": "https://github.com/redpanda-data/redpanda/commit/9743adb7f93bff3b2ffb994709fb75d0558597dd",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "monero-project/monero",
        "commits": [
            {
                "no": 285,
                "msg": "libwallet_api: fix unhandled exception on address check",
                "url": "https://github.com/monero-project/monero/commit/0019e3106bffcdb269af56de13ecababe545b395",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 286,
                "msg": "levin_protocol_handler_async: another attempt at fixing at exception",
                "url": "https://github.com/monero-project/monero/commit/cb9aa23cc54be17badb32e4450eb7d183f43a6d9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 287,
                "msg": "core: catch exceptions from get_output_key\n\nThis can happen when trying to find an amount that does not exist,\nand fixes a core test.",
                "url": "https://github.com/monero-project/monero/commit/3cabdb5ef239fa1d1638d5233de882f59c787dc8",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 288,
                "msg": "wallet: fixes and tweaks to the save_watch_only command\n\n- save the new keys file as FOO-watchonly.keys, not FOO.keys-watchonly\n- catch any exception (eg, I/O errors) and error out\n- print the new key...",
                "url": "https://github.com/monero-project/monero/commit/1979d53d78bf0f94e442191c8766fcbc79778be6",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "scylladb/seastar",
        "commits": [
            {
                "no": 289,
                "msg": "tls.cc: Make \"close\" timeout delay exception proof\n\nFixes #474\n\nWe could end up _generating_ exceptions in the timed out\nshutdown code, which also could end up as unhandled\nfutures.\n\nAdd both try-catc...",
                "url": "https://github.com/scylladb/seastar/commit/60892e8ce47f1201411b487e3bfecbfb0044fde6",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 290,
                "msg": "tls: Make sure handshake exceptions are futurized\n\nFixes #333\n\"verify\", which checks cert validity, throws on error.\nNeed to catch and futurize (or make callers deal with both -\nthe former is easier)....",
                "url": "https://github.com/scylladb/seastar/commit/cff53f9ee3dc5ceb7e4ae3bc89205128e27a576c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "./configure --compiler=/home/zhh/clang/bin/clang++ && bear -- ninja -j64",
                        "Compilation has errors."
                    ]
                }
            },
            {
                "no": 291,
                "msg": "sharded: improve sharded::start\n\n- fix catch statement so it catches all exceptions\n- call stop, so the instances are destroyed in the correct CPUs\n\nSigned-off-by: Glauber Costa <glommer@cloudius-syst...",
                "url": "https://github.com/scylladb/seastar/commit/d8fb6c86db2a74349e2e68d6c347bbdabf304280",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 290"
                    ]
                }
            },
            {
                "no": 292,
                "msg": "json: Add backtrace information for json generation exceptions\n\nThe json generation infrasructure in seastar, uses to_json\noverloaded methods to do part of it's generation magic.\nThose function are no...",
                "url": "https://github.com/scylladb/seastar/commit/1ab0e12e61443c152882baf5eff081fea87aaac2",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            }
        ]
    },
    {
        "repo": "oceanbase/oceanbase",
        "commits": [
            {
                "no": 293,
                "msg": "[CP] [CP] fix: for tenant worker, catch exception outside process_one()",
                "url": "https://github.com/oceanbase/oceanbase/commit/f46f1293e61e917432c7c887cf454a46834efb05",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            }
        ]
    },
    {
        "repo": "canonical/multipass",
        "commits": [
            {
                "no": 294,
                "msg": "[image_vault/lxd] Catch exception when unable to get image info for an instance\n\nFixes #2452",
                "url": "https://github.com/canonical/multipass/commit/8c75fb51e4410391e910f2e5c8fee4c76e786700",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "3rd-party/qhotkey/CMakeLists.txt has a bug. I have fixed it."
                    ]
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "cg-analyzer says 'exception already caught'"
                    ]
                }
            },
            {
                "no": 295,
                "msg": "delayed_shutdown: Catch thrown exception if ssh exec fails\n\nFixes #1128",
                "url": "https://github.com/canonical/multipass/commit/609171546be139e902a1e76b3eb43bae0b684761",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[multipass]::DelayedShutdownTimer::~DelayedShutdownTimer",
                        "loc": "/home/gk/repos/5k-10k/multipass-copies/295/src/daemon/delayed_shutdown_timer.cpp:61:26",
                        "callee": "[multipass]::SSHSession::exec",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 296,
                "msg": "image_host: Catch exceptions in QTimer lambda\n\nFixes #316",
                "url": "https://github.com/canonical/multipass/commit/20555a3d3fe68fdb662d92b83ed5f392fde89c0e",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[multipass]::UbuntuVMImageHost::UbuntuVMImageHost(std::vector<std::pair<std::string, std::string>>, multipass::URLDownloader *, std::chrono::seconds)::(anonymous class)::operator()",
                        "loc": "/home/gk/repos/5k-10k/multipass-copies/296/src/daemon/ubuntu_image_host.cpp:76:38",
                        "callee": "[multipass]::UbuntuVMImageHost::update_manifest",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        16,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 297,
                "msg": "[lxd] Add try/catch around updating and pruning images\n\nPreviously, when the \"multipass\" project didn't exist on daemon start, there would be an\nunhandled exception and the daemon would exit.\n\nFixes #...",
                "url": "https://github.com/canonical/multipass/commit/ad781bd34d8d7aad27fe159eef838ff70430e194",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Weird error in qhotkey: several files missing.",
                        "I fixed it by copying the qhotkey folder from 294."
                    ]
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[multipass]::LXDVMImageVault::prune_expired_images",
                        "loc": "/home/gk/repos/5k-10k/multipass-copies/297/src/platform/backends/lxd/lxd_vm_image_vault.cpp:212:13",
                        "callee": "[multipass]::lxd_request",
                        "exception": "c:@N@multipass@S@LXDNotFoundException"
                    },
                    "Context": [
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[multipass]::LXDVMImageVault::prune_expired_images",
                        "loc": "/home/gk/repos/5k-10k/multipass-copies/297/src/platform/backends/lxd/lxd_vm_image_vault.cpp:196:23",
                        "callee": "[multipass]::lxd_request",
                        "exception": "c:@N@multipass@S@LXDNotFoundException"
                    },
                    "Context": [
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "[multipass]::LXDVMImageVault::update_images",
                        "loc": "/home/gk/repos/5k-10k/multipass-copies/297/src/platform/backends/lxd/lxd_vm_image_vault.cpp:222:23",
                        "callee": "[multipass]::lxd_request",
                        "exception": "c:@N@multipass@S@LXDNotFoundException"
                    },
                    "Context": [
                        17,
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "[multipass]::LXDVMImageVault::update_images",
                        "loc": "/home/gk/repos/5k-10k/multipass-copies/297/src/platform/backends/lxd/lxd_vm_image_vault.cpp:237:17",
                        "callee": "[multipass]::lxd_request",
                        "exception": "c:@N@multipass@S@LXDNotFoundException"
                    },
                    "Context": [
                        17,
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "IntelRealSense/librealsense",
        "commits": [
            {
                "no": 298,
                "msg": "Fix Coverity issues - catch exceptions in tools",
                "url": "https://github.com/IntelRealSense/librealsense/commit/51b2fc3a6c81a2886e1b23a7fb959f35f9e42546",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation does not have error.",
                        "The try blocks to analyze are in 'main' function of many files. I have renamed the 'main' functions to unique names according to their filenames.",
                        "This commit fixes coverity issues. It adds 'catch' clauses to many VERY LOOOOONG try blocks.",
                        "I cannot figure out which are the callsites that throw exceptions."
                    ]
                }
            },
            {
                "no": 299,
                "msg": "fix catch runtime_error -> exception",
                "url": "https://github.com/IntelRealSense/librealsense/commit/5eb5e975835cb6bfee7479fc0550c7a2d5204fa4",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "CMake should be run with '-DBUILD_WITH_DDS=ON'."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[realdds]::dds_device::impl::create_metadata_reader()::(anonymous class)::operator()",
                        "loc": "/home/gk/repos/5k-10k/librealsense-copies/299/third-party/realdds/src/dds-device-impl.cpp:476:68",
                        "callee": "[realdds]::[topics]::flexible_msg::json_data",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        1,
                        16,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "Stellarium/stellarium",
        "commits": [
            {
                "no": 300,
                "msg": "Make sure only 1 texture is loaded at once (reduce memory spikes)\nCapture std::exceptions in texture load (catches std::bad_alloc for out-of-memory situations)\nWhitespace fix",
                "url": "https://github.com/Stellarium/stellarium/commit/e7601c780f077b9618f88d2eeb7c67546fc84262",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "StelTexture::loadFromData",
                        "loc": "/home/gk/repos/5k-10k/stellarium-copies/300/src/core/StelTexture.cpp:116:9",
                        "callee": "StelTexture::GLData::GLData",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "StelTexture::loadFromPath",
                        "loc": "/home/gk/repos/5k-10k/stellarium-copies/300/src/core/StelTexture.cpp:111:9",
                        "callee": "StelTexture::GLData::GLData",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "falcosecurity/falco",
        "commits": [
            {
                "no": 301,
                "msg": "fix(userspace): handle exceptions for process_k8s_audit_event\n\nThis fix has two major points in it:\n\n- when `std::stoll` is used in parse_as_int64 handle all the exceptions it\ncan throw (https://en.cp...",
                "url": "https://github.com/falcosecurity/falco/commit/46425b392cc949b78d754c71875ad9a9c5121106",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Missing grpc_cpp_plugin. I have not figured it out how to install it."
                    ]
                }
            }
        ]
    },
    {
        "repo": "openscad/openscad",
        "commits": [
            {
                "no": 302,
                "msg": "Catch RangeTest exception from clipper. Fixes #1410",
                "url": "https://github.com/openscad/openscad/commit/b152acb9e4743b2a76be1356d3772049c0fa5e87",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Compilation has errors.",
                        "Note that in this project, we should fix all compile errors so that bear can generate compile_commands.json with the entire building process finished.",
                        "After I have tried my best, there are one error remaining that is related to flex/bison. I'm not so familiar with it.",
                        "Then I found that currently bear will generate a compile_commands.json file with 136 items, and 'make clean' deletes exactly 136 '.o' files.",
                        "Therefore, I think the generated compile_commands.json is correct.",
                        "Analysis can be done with parser_yacc.cpp excluded from compile_commands.json, which is the file that causes the aforementioned error.",
                        "Also note that two files in src/cgalutils* are erased (renamed with '.bak') because they have errors using the current version of CGAL. I think they are not related to the files we are analyzing."
                    ]
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "See notes of compile_commands_generation."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[ClipperUtils]::sanitize",
                        "loc": "src/clipper-utils.cc:33:11",
                        "callee": "[ClipperLib]::ClipperBase::AddPaths",
                        "exception": "..."
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "zeek/zeek",
        "commits": [
            {
                "no": 303,
                "msg": "Fix uncaught exceptions from Val cloning failures",
                "url": "https://github.com/zeek/zeek/commit/e5e84041b7fe8cf22a918854a76146abf1e03451",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "TableVal::Default",
                        "loc": "/home/gk/repos/5k-10k/zeek-copies/303/src/Val.cc:1750:70",
                        "callee": "Val::Clone",
                        "exception": "c:@S@InterpreterException"
                    },
                    "Context": [
                        8,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "Project-OSRM/osrm-backend",
        "commits": [
            {
                "no": 304,
                "msg": "fix coverity issue 1121925, Uncaught exception",
                "url": "https://github.com/Project-OSRM/osrm-backend/commit/9730526d333b242434b433130c26fd56afd2eee0",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "main___datastore_cpp",
                        "loc": "/home/gk/repos/5k-10k/osrm-backend-copies/304/datastore.cpp:53:7",
                        "callee": "[boost]::[interprocess]::scoped_lock::scoped_lock",
                        "exception": "..."
                    },
                    "Context": [
                        3,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "OpenTTD/OpenTTD",
        "commits": [
            {
                "no": 305,
                "msg": "Fix #7590: handle script exceptions during scanning",
                "url": "https://github.com/OpenTTD/OpenTTD/commit/a82e7ec281ca08d91bcff129b390a3f58ac308ba",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "ScriptScanner::AddFile",
                        "loc": "/home/gk/repos/5k-10k/OpenTTD-copies/305/src/script/script_scanner.cpp:55:16",
                        "callee": "Squirrel::LoadScript",
                        "exception": "c:@S@Script_FatalError"
                    },
                    "Context": [
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "ethereum-mining/ethminer",
        "commits": [
            {
                "no": 306,
                "msg": "Fix CUDA driver version check.\nWhen accessing CUDAMiner, CUDAMiner::getNumDevices() is\ncalled which can cause an exception.\nCatch the exception, display the error message and exit.",
                "url": "https://github.com/ethereum-mining/ethminer/commit/db05c85ee0fbbf98674754f303ed6cb26e57cbc2",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "It tries to download Boost 1.66.0 from a 404 page. I have not figured out which script it is running to download Boost."
                    ]
                }
            }
        ]
    },
    {
        "repo": "Alexays/Waybar",
        "commits": [
            {
                "no": 307,
                "msg": "(hyprland) fix crash when failed to parse IPC message\n\nIPC messages are parsed in a dedicated thread, and the thread terminates when\nan exception is not caught, which causes the waybar process to cras...",
                "url": "https://github.com/Alexays/Waybar/commit/b8e68b0e6301869d04c065905c7b811d3790ce9d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "It uses meson: 'meson build && ninja -C build'.",
                        "meson generates compile_commands.json automatically, in the 'build' folder.",
                        "However, I found that compilation has errors in the standard library, which results from different implementations regarding C++20 between GCC and Clang.",
                        "This suggests that -stdlib=libc++ should be used, but I don't know how to set it in meson.",
                        "I tried 'meson -Dcpp_args=\"-stdlib=libc++\" build', meson also recognized it, but I found that it was not added to the compilation commands of every file.",
                        "Now build/compile_commands.json you see was generated by 'meson build -Dcpp_args=\"-stdlib=libc++\"'."
                    ]
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[waybar]::[modules]::[hyprland]::IPC::startIPC()::(anonymous class)::operator()",
                        "loc": "../src/modules/hyprland/backend.cpp:89:7",
                        "callee": "[waybar]::[modules]::[hyprland]::IPC::parseIPC",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        16,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 308,
                "msg": "[wlr/taskbar] Fix unhandled exception crash when icon name is a path.",
                "url": "https://github.com/Alexays/Waybar/commit/22ed153004e904ed58fe3d4817576552ff1fa57b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Same as 307."
                    ]
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[waybar]::[modules]::[wlr]::image_load_icon",
                        "loc": "../src/modules/wlr/taskbar.cpp:175:35",
                        "callee": "[Gtk]::IconTheme::load_icon",
                        "exception": "..."
                    },
                    "Context": [
                        31,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 309,
                "msg": "Fix various mpd bugs\n\n- Add elapsedTime and totalTime to tooltip format arguments\n- Catch format exceptions and print error\n- Copy mpd connection error message before it gets freed\n- Update display af...",
                "url": "https://github.com/Alexays/Waybar/commit/be3f47b37437e11a84031b076ef46802c654c7fe",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Same as 307."
                    ]
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[waybar]::[modules]::MPD::setLabel",
                        "loc": "../src/modules/mpd/mpd.cpp:169:37",
                        "callee": "[fmt]::basic_format_string::basic_format_string",
                        "exception": "fmt::format_error (New!)"
                    },
                    "Context": [
                        25
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[waybar]::[modules]::MPD::setLabel",
                        "loc": "../src/modules/mpd/mpd.cpp:149:7",
                        "callee": "[fmt]::format",
                        "exception": "fmt::format_error (New!)"
                    },
                    "Context": [
                        25,
                        31
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "goldendict/goldendict",
        "commits": [
            {
                "no": 310,
                "msg": "Fix unhandled exceptions at resources loading",
                "url": "https://github.com/goldendict/goldendict/commit/afaa0a70ab2efe0eb3dd5783210357d5113148b8",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "It uses qmake-qt4 to configure and generate Makefile, but I failed to let it use our clang.",
                        "Then I modified the generated Makefile on my own to make it use clang.",
                        "However, compilation still has errors."
                    ]
                }
            }
        ]
    },
    {
        "repo": "wesnoth/wesnoth",
        "commits": [
            {
                "no": 311,
                "msg": "fix #2648: allow load turn in local multiplayer\n\nthis commit handles the load_game_exception thrown when the user presses\nthe button to load a specific turn.",
                "url": "https://github.com/wesnoth/wesnoth/commit/f56fece45056a12ca289cf9822a9dcff23e531d4",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "game_launcher::play_multiplayer_commandline",
                        "loc": "/home/gk/repos/5k-10k/wesnoth-copies/311/src/game_launcher.cpp:971:2",
                        "callee": "[mp]::start_local_game_commandline",
                        "exception": "c:@N@savegame@S@load_game_exception"
                    },
                    "Context": [
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 312,
                "msg": "fix uncaught stoi exception\n\n(cherry-picked from commit e88a73fc2a5b4deb4c67650b419d0ef528088a65)",
                "url": "https://github.com/wesnoth/wesnoth/commit/88db848d207a71704d8247f9938f8649835e5e30",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[unit_filter_impl]::unit_filter_compound::fill(vconfig)::(anonymous class)::operator()",
                        "loc": "/home/gk/repos/5k-10k/wesnoth-copies/312/src/units/filter.cpp:443:20",
                        "callee": "[std]::stoi",
                        "exception": "c:@N@std@S@invalid_argument"
                    },
                    "Context": [
                        16,
                        25,
                        31
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 313,
                "msg": "fix missing catch invalid_utf8_exception\n\nthis caused crashes when loading certain replays.",
                "url": "https://github.com/wesnoth/wesnoth/commit/7875f4fc0824a7e5f222d2d98c98bd7799789441",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[font]::make_text_ellipsis",
                        "loc": "/home/gk/repos/5k-10k/wesnoth-copies/313/src/font/sdl_ttf.cpp:455:16",
                        "callee": "[ucs4]::iterator_base::end",
                        "exception": "c:@N@utf8@S@invalid_utf8_exception"
                    },
                    "Context": [
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[font]::make_text_ellipsis",
                        "loc": "/home/gk/repos/5k-10k/wesnoth-copies/313/src/font/sdl_ttf.cpp:455:43",
                        "callee": "[ucs4]::iterator_base::operator++",
                        "exception": "c:@N@utf8@S@invalid_utf8_exception"
                    },
                    "Context": [
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "[font]::make_text_ellipsis",
                        "loc": "/home/gk/repos/5k-10k/wesnoth-copies/313/src/font/sdl_ttf.cpp:453:17",
                        "callee": "[ucs4]::iterator_base::iterator_base",
                        "exception": "c:@N@utf8@S@invalid_utf8_exception"
                    },
                    "Context": [
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 314,
                "msg": "Fix #2153: crash in MP lobby chat with low horizontal window size\n\n[size_lock] could cause layout_exception_width_modified while shrinking\nthe widget, and it didn't catch the exception. Now it does.",
                "url": "https://github.com/wesnoth/wesnoth/commit/7d1991a8d83cb8f34286644495351f0535c3c7d6",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[gui2]::size_lock::place",
                        "loc": "/home/gk/repos/5k-10k/wesnoth-copies/314/src/gui/widgets/size_lock.cpp:48:3",
                        "callee": "[gui2]::container_base::reduce_height",
                        "exception": "c:@N@gui2@S@layout_exception_width_modified"
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 315,
                "msg": "Set the std::ios::failbit exception when preprocessing a resource.\n\nFixes bug #19335\n\nThis is needed in order for the preprocessor's thrown\nexceptions to reach our code and not be caught inside\nSTL's ...",
                "url": "https://github.com/wesnoth/wesnoth/commit/58d28e3f0923f92b96ea5afe994c2f44377a5e03",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "main_src_game_cpp",
                        "loc": "/home/gk/repos/5k-10k/wesnoth-copies/315/src/game.cpp:646:19",
                        "callee": "do_gameloop",
                        "exception": "c:@N@std@S@ios_base@S@failure"
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 316,
                "msg": "catch a invalid_utf8_exception when displaying a save-corrupt message,\n\n...fixing bug #12771 , or more like woring around another issue\nconcerning invalid UTF getting in the warning message in the fir...",
                "url": "https://github.com/wesnoth/wesnoth/commit/3ab289386fa352c06e98b9c2580cc4cfd34b8fdd",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Requires Boost 1.33."
                    ]
                }
            }
        ]
    },
    {
        "repo": "OpenMW/openmw",
        "commits": [
            {
                "no": 317,
                "msg": "Catch exception from invalid scripts during save&load (Fixes #1590)",
                "url": "https://github.com/OpenMW/openmw/commit/1de406cb6de08e0ad37da81af4c3e34b08823134",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Only two files fail to compile and I think they don't affect our analysis. I excluded them from the compilation."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[MWScript]::Locals::write",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:79:60",
                        "callee": "[MWBase]::ScriptManager::getLocals",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[MWScript]::Locals::write",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:92:66",
                        "callee": "[Compiler]::Locals::get",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        25,
                        29,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "[MWScript]::Locals::write",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:101:35",
                        "callee": "[ESM]::Variant::setType",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        23,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "[MWScript]::Locals::write",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:102:35",
                        "callee": "[ESM]::Variant::setType",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        23,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "[MWScript]::Locals::write",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:100:35",
                        "callee": "[ESM]::Variant::setType",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        23,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_6": {
                    "Info": {
                        "caller": "[MWScript]::Locals::write",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:101:64",
                        "callee": "[ESM]::Variant::setInteger",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        23,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_7": {
                    "Info": {
                        "caller": "[MWScript]::Locals::write",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:100:64",
                        "callee": "[ESM]::Variant::setInteger",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        23,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_8": {
                    "Info": {
                        "caller": "[MWScript]::Locals::write",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:102:66",
                        "callee": "[ESM]::Variant::setFloat",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        23,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_9": {
                    "Info": {
                        "caller": "[MWScript]::Locals::read",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:113:60",
                        "callee": "[MWBase]::ScriptManager::getLocals",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        9,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_10": {
                    "Info": {
                        "caller": "[MWScript]::Locals::read",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:118:39",
                        "callee": "[Compiler]::Locals::getType",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        9,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_11": {
                    "Info": {
                        "caller": "[MWScript]::Locals::read",
                        "loc": "/home/gk/repos/5k-10k/openmw-copies/317/apps/openmw/mwscript/locals.cpp:119:39",
                        "callee": "[Compiler]::Locals::getIndex",
                        "exception": "c:@N@Compiler@S@SourceException"
                    },
                    "Context": [
                        9,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "microsoft/terminal",
        "commits": [
            {
                "no": 318,
                "msg": "Work around a compiler bug w/ coroutines and exceptions (#9893)\n\nThere is a bug in the compiler that we trip over when we handle the\r\nexception generated by Package::Current inside a coroutine. It app...",
                "url": "https://github.com/microsoft/terminal/commit/21b2e01643f92eb5e111356c8b14d263c2620076",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Windows project."
                    ]
                }
            },
            {
                "no": 319,
                "msg": "Teach TerminalPage to handle exceptions that happen during paste (#5856)\n\nTerminal should try not to join the choir invisible when the clipboard\r\nAPI straight up horks it.\r\n\r\nThis accounts for ~3% of ...",
                "url": "https://github.com/microsoft/terminal/commit/a99c81279430d1323268ffdf107efab03f623ace",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Windows project."
                    ]
                }
            },
            {
                "no": 320,
                "msg": "Fix FillConsoleOutputCharacterA crash (#4309)\n\n## Summary of the Pull Request\r\nDespite being specified as `noexcept`, `FillConsoleOutputCharacterA` emits an exception when a call to `ConvetToW` is mad...",
                "url": "https://github.com/microsoft/terminal/commit/65bd4e327c3213cac30d360b313ab2e7bf453397",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Windows project."
                    ]
                }
            }
        ]
    },
    {
        "repo": "bitcoin/bitcoin",
        "commits": [
            {
                "no": 321,
                "msg": "rpcserver: attempt to fix uncaught exception.",
                "url": "https://github.com/bitcoin/bitcoin/commit/8db17607510eb250f3faf7963affa337eb7039d5",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Compilation has errors from OpenSSL."
                    ]
                }
            },
            {
                "no": 322,
                "msg": "Avoid ugly exception in log on unknown inv type\n\nIt is unexpected behavior for `ToString` to raise an exception. It\nis expected to do a best-effort attempt at formatting but never fail.\n\nCatch the exc...",
                "url": "https://github.com/bitcoin/bitcoin/commit/e9f25ddd0063f7ea65595178d04370d27344305c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 321."
                    ]
                }
            }
        ]
    },
    {
        "repo": "nlohmann/json",
        "commits": [
            {
                "no": 323,
                "msg": ":ambulance: fix for #519\n\nAdded catch branch for out_of_range exception that can occur if input\nfile contains a number overflow.",
                "url": "https://github.com/nlohmann/json/commit/31a6c0910e5676130b0f5df11b743700b70fb8ec",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "One bug in test/thirdparty/catch/catch.hpp fixed.",
                        "There are also several bugs in another unrelated file. I removed it from compile_commands.json."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "LLVMFuzzerTestOneInput",
                        "loc": "/home/gk/repos/10k/json-copies/323/test/src/fuzzer-parse_json.cpp:34:19",
                        "callee": "[nlohmann]::basic_json::parse",
                        "exception": "nlohmann::json::out_of_range (New!)"
                    },
                    "Context": [
                        1
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "WerWolv/ImHex",
        "commits": [
            {
                "no": 324,
                "msg": "fix: Handle exceptions thrown by providers on loadSettings() (#1307)",
                "url": "https://github.com/WerWolv/ImHex/commit/5e86f62a9809c35fc4d6ed5b41b4c4aa3534f336",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Clang 17 or newer is required."
                    ]
                }
            }
        ]
    },
    {
        "repo": "ClickHouse/ClickHouse",
        "commits": [
            {
                "no": 325,
                "msg": "Fix uncaught exception in background tasj",
                "url": "https://github.com/ClickHouse/ClickHouse/commit/4bc32c638768c07eceb97ee6823a9400b8e40b9a",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Clang 16 or newer is required."
                    ]
                }
            },
            {
                "no": 326,
                "msg": "Fix possible uncaught exception during distributed query cancellation\n\nCancellation of distributed queries may throw (i.e. some timeout), and\nin case of pipeline had not been properly created properly...",
                "url": "https://github.com/ClickHouse/ClickHouse/commit/3108a988dea5807a177bb0e02489bbf9da2c0aa7",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Clang 16 or newer is required."
                    ]
                }
            },
            {
                "no": 327,
                "msg": "Fix: handle exceptions from unlockSharedData() during error handling\n\n+ renamePartToTemporary() lambda to reused code",
                "url": "https://github.com/ClickHouse/ClickHouse/commit/3204f7353bfd062344d4e86c46e45c37f798a278",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "FindRust.cmake reports some strange errors."
                    ]
                }
            },
            {
                "no": 328,
                "msg": "fix uncaught exception in DatabaseLazy",
                "url": "https://github.com/ClickHouse/ClickHouse/commit/90eba0c0f6f396066ac0eb98b9da2cd5423f99f5",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "File not found, but I have already built the project successfully.",
                        "I removed some files that were reported not found from compile_commands.json.",
                        "Then cg-driver reports many frontend errors, mostly from .S files and I don't know how to fix them.",
                        "I ran cg-driver with '--no-strict'. Most errors are from .S files, but there are also some from .cpp files.",
                        "Then [build_ipm] reports the following error:",
                        "Traceback (most recent call last):\n  File \"/usr/local/bin/cg-driver\", line 616, in <module>\n    builder.build()\n  File \"/usr/local/bin/cg-driver\", line 598, in build\n    self.build_pm()\n  File \"/usr/local/bin/cg-driver\", line 373, in build_pm\n    ipm = json.loads(ipm_file.read_bytes())\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.12/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.12/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.12/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                    ]
                }
            },
            {
                "no": 329,
                "msg": "Catch exceptions in BackgroundSchedulePool\n\nI saw the case when one of users of BackgroundSchedulePool\n(DirectoryMonitor for async INSERT into Distributed table) throws (in\na very unlikely scenaior, w...",
                "url": "https://github.com/ClickHouse/ClickHouse/commit/ae2bd711d92b54515234bd99fe4b38b75372e545",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "FindRust.cmake reports some strange errors."
                    ]
                }
            },
            {
                "no": 330,
                "msg": "Fix uncaught exception in case of parallel loader for hashed dictionaries\n\nSince ThreadPool::wait() rethrows the first exception (if any):\n\n<details>\n\n<summary>stacktrace</summary>\n\n    2023.04.09 12:...",
                "url": "https://github.com/ClickHouse/ClickHouse/commit/211cea5e7c99119777d387a6b5331e4703e24510",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Clang 15 or newer is required."
                    ]
                }
            },
            {
                "no": 331,
                "msg": "client: try catch for External table exceptions, couple of fixes [METR-10071]",
                "url": "https://github.com/ClickHouse/ClickHouse/commit/4ffc3fbdf7e8b320b96e937d46fe79c0918e281e",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "I didn't figured out how to compile."
                    ]
                }
            },
            {
                "no": 332,
                "msg": "Fix uncaught exception during server termination\n\nExample of a stacktrace:\n\n<details>\n\n```\n[ 47463 ] {} <Trace> BaseDaemon: Received signal 15\n[ 47463 ] {} <Information> Application: Received terminat...",
                "url": "https://github.com/ClickHouse/ClickHouse/commit/df414ae71c54faa1eaaa218b80ee904f9948cd07",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "File not found, but I have already built the project almost successfully."
                    ]
                }
            }
        ]
    },
    {
        "repo": "aseprite/aseprite",
        "commits": [
            {
                "no": 333,
                "msg": "Handle some extra CannotWriteDocException cases when ContextWriter is used (#4367)\n\nOne fix that this patch includes for #4367 (crash by unhandled\nCannotWriteDocException exception) is when we drag-an...",
                "url": "https://github.com/aseprite/aseprite/commit/7905acf38a8114c13270bed61305851642454e31",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": []
                },
                "fix_1": {
                    "Info": {
                        "caller": "[app]::OptionsWindow::saveConfig",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/commands/cmd_options.cpp:787:21",
                        "callee": "[app]::ContextWriter::ContextWriter",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[app]::OptionsWindow::saveConfig",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/commands/cmd_options.cpp:788:10",
                        "callee": "[app]::Tx::Tx",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "[app]::OptionsWindow::saveConfig",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/commands/cmd_options.cpp:789:7",
                        "callee": "[app]::Tx::operator()",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "[app]::OptionsWindow::saveConfig",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/commands/cmd_options.cpp:790:10",
                        "callee": "[app]::Tx::commit",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "[app]::MovingSelectionState::onLeaveState",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/ui/editor/moving_selection_state.cpp:84:21",
                        "callee": "[app]::ContextWriter::ContextWriter",
                        "exception": "c:@N@base@S@Exception"
                    },
                    "Context": [
                        17,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_6": {
                    "Info": {
                        "caller": "[app]::MovingSelectionState::onLeaveState",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/ui/editor/moving_selection_state.cpp:85:10",
                        "callee": "[app]::Tx::Tx",
                        "exception": "c:@N@base@S@Exception"
                    },
                    "Context": [
                        17,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_7": {
                    "Info": {
                        "caller": "[app]::MovingSelectionState::onLeaveState",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/ui/editor/moving_selection_state.cpp:86:7",
                        "callee": "[app]::Tx::operator()",
                        "exception": "c:@N@base@S@Exception"
                    },
                    "Context": [
                        17,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_8": {
                    "Info": {
                        "caller": "[app]::MovingSelectionState::onLeaveState",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/ui/editor/moving_selection_state.cpp:87:10",
                        "callee": "[app]::Tx::commit",
                        "exception": "c:@N@base@S@Exception"
                    },
                    "Context": [
                        17,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_9": {
                    "Info": {
                        "caller": "[app]::Timeline::onProcessMessage",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/ui/timeline/timeline.cpp:1392:31",
                        "callee": "[app]::ContextWriter::ContextWriter",
                        "exception": "c:@N@base@S@Exception"
                    },
                    "Context": [
                        17,
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_10": {
                    "Info": {
                        "caller": "[app]::Timeline::onProcessMessage",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/ui/timeline/timeline.cpp:1393:20",
                        "callee": "[app]::Tx::Tx",
                        "exception": "c:@N@base@S@Exception"
                    },
                    "Context": [
                        17,
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_11": {
                    "Info": {
                        "caller": "[app]::Timeline::onProcessMessage",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/ui/timeline/timeline.cpp:1394:17",
                        "callee": "[app]::Tx::operator()",
                        "exception": "c:@N@base@S@Exception"
                    },
                    "Context": [
                        17,
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_12": {
                    "Info": {
                        "caller": "[app]::Timeline::onProcessMessage",
                        "loc": "/home/gk/repos/10k/aseprite-copies/333/src/app/ui/timeline/timeline.cpp:1398:20",
                        "callee": "[app]::Tx::commit",
                        "exception": "c:@N@base@S@Exception"
                    },
                    "Context": [
                        17,
                        25,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 334,
                "msg": "Fix crash if an exception happens in DelayedMouseMove::commitMouseMove()\n\nWithout this an exception in DelayedMouseMove::commitMouseMove() could\nproduce (e.g.) the crash in #3818. This same error hand...",
                "url": "https://github.com/aseprite/aseprite/commit/d8ed4d3995b3a7e1ea5a1e2a0f18862d112161d0",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": []
                },
                "fix_1": {
                    "Info": {
                        "caller": "[app]::DelayedMouseMove::commitMouseMove",
                        "loc": "/home/gk/repos/10k/aseprite-copies/334/src/app/ui/editor/delayed_mouse_move.cpp:74:15",
                        "callee": "[app]::DelayedMouseMoveDelegate::onCommitMouseMove",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 335,
                "msg": "Fix lua error crash (fix #2635)\n\nPrevents crashes from uncaught exceptions generated from Lua errors\nwhen running aseprite from the console with -script param.",
                "url": "https://github.com/aseprite/aseprite/commit/1193bf18fcf5fd58004bda3c6efafc8deef937e4",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": []
                },
                "fix_1": {
                    "Info": {
                        "caller": "[app]::CliProcessor::process",
                        "loc": "/home/gk/repos/10k/aseprite-copies/335/src/app/cli/cli_processor.cpp:535:34",
                        "callee": "[app]::CliDelegate::execScript",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 336,
                "msg": "Fix issue 366: Crash (uncaught exception) on closing application",
                "url": "https://github.com/aseprite/aseprite/commit/45f01665084e16b444098d60a05866e277332264",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "This is the same as No.232."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[base]::TempDir::~TempDir",
                        "loc": "/home/gk/repos/10k/aseprite-copies/336/src/base/temp_dir.cpp:41:5",
                        "callee": "[base]::remove_directory",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        31,
                        32
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[base]::TempDir::attach",
                        "loc": "/home/gk/repos/10k/aseprite-copies/336/src/base/temp_dir.cpp:47:5",
                        "callee": "[base]::remove_directory",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        31,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 337,
                "msg": "Fix crash in Editor::drawOneSpriteUnclippedRect() (issue 361)\n\nWe've to catch std::bad_alloc exceptions.",
                "url": "https://github.com/aseprite/aseprite/commit/eb7016bede161fac256aa867103525c7955db097",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "This is the same as No.233."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[app]::Editor::drawOneSpriteUnclippedRect",
                        "loc": "/home/gk/repos/10k/aseprite-copies/337/src/app/ui/editor/editor.cpp:389:21",
                        "callee": "[app]::RenderEngine::renderSprite",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        25,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "qbittorrent/qBittorrent",
        "commits": [
            {
                "no": 338,
                "msg": "Fix possibly uncaught invalid_handle exception",
                "url": "https://github.com/qbittorrent/qBittorrent/commit/15ab369f628dc2d7c6eebb6899f851471786057c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "I don't know how to teach it to find boost."
                    ]
                }
            }
        ]
    },
    {
        "repo": "taichi-dev/taichi",
        "commits": [
            {
                "no": 339,
                "msg": "[Opengl] Fix: runtime caught error cannot be displayed in opengl (#7998)\n\n### Brief Summary\r\n\r\nThis PR fixes the issue that caught errors weren't logged out in opengl\r\ndevice.\r\n\r\n<!--\r\ncopilot:summary...",
                "url": "https://github.com/taichi-dev/taichi/commit/7f749506ccaf246c4652b6f6b9360fe31b93f736",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Compilation has very few errors. I think it doesn't matter."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "[taichi]::[lang]::[opengl]::GLDevice::create_pipeline",
                        "loc": "/home/gk/repos/10k/taichi-copies/339/taichi/rhi/opengl/opengl_device.cpp:646:25",
                        "callee": "[taichi]::[lang]::[opengl]::GLPipeline::GLPipeline",
                        "exception": "c:@N@std@S@invalid_argument"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[taichi]::[lang]::[opengl]::GLDevice::create_pipeline",
                        "loc": "/home/gk/repos/10k/taichi-copies/339/taichi/rhi/opengl/opengl_device.cpp:646:25",
                        "callee": "[taichi]::[lang]::[opengl]::GLPipeline::GLPipeline",
                        "exception": "std::runtime_error (New!)"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": true,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "dragonflydb/dragonfly",
        "commits": [
            {
                "no": 340,
                "msg": "fix(server): rdb loader catch bad alloc (#1748)\n\nWhile loading rdb snapshot, if oom is reached a bad alloc exception is thrown. Now we\r\ncatch it and write warning to log and fali loader.\r\n\r\nSigned-off...",
                "url": "https://github.com/dragonflydb/dragonfly/commit/901d3fff58b15aef4a46c942c99ac9c1f0b61ffd",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Some weird error happens."
                    ]
                }
            }
        ]
    },
    {
        "repo": "envoyproxy/envoy",
        "commits": [
            {
                "no": 341,
                "msg": "fix gRPC crash due to uncaught exception (#8958)\n\nFixes  #8941\r\n\r\nSigned-off-by: Kuat Yessenov <kuat@google.com>",
                "url": "https://github.com/envoyproxy/envoy/commit/bef44ab406cfc32e47a08a107bd157c17553de97",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            }
        ]
    },
    {
        "repo": "RedisInsight/RedisDesktopManager",
        "commits": [
            {
                "no": 342,
                "msg": "Fix issue #3354: Unhandled C++ Exception in rdm.exe!ConsoleModel::init()",
                "url": "https://github.com/RedisInsight/RedisDesktopManager/commit/6382ac5d5452c0bf39c51f7d3b9213a2917194c7",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "unknown"
                    ]
                }
            }
        ]
    },
    {
        "repo": "microsoft/winget-cli",
        "commits": [
            {
                "no": 343,
                "msg": "WinGetDownload E_ACCESSDENIED (#4518)\n\nFix issue when calling WinGetDownload from Az Functions.\r\n\r\nIt is most likely caused by an attempt to create the directory while\r\nreading the admin settings. Ins...",
                "url": "https://github.com/microsoft/winget-cli/commit/1ad382023bfcbe980a696b213fd0f60cd68d0086",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Visual Studio project"
                    ]
                }
            },
            {
                "no": 344,
                "msg": "Fix exceptions breaking out of the multi-package install loop (#2089)\n\nWrap the subexecution with a try/catch to prevent exceptions from breaking out of the mult-package install loop.",
                "url": "https://github.com/microsoft/winget-cli/commit/8340ee2738b2cb73f5f69db425e96705b35675a6",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Visual Studio project"
                    ]
                }
            }
        ]
    },
    {
        "repo": "osquery/osquery",
        "commits": [
            {
                "no": 345,
                "msg": "Fix crash caused by boost's unhandled exception (#3309)",
                "url": "https://github.com/osquery/osquery/commit/e0f5de75b946efe8431cf6bd6d301dcd6acd274f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "THRIFT_COMPILER not found."
                    ]
                }
            },
            {
                "no": 346,
                "msg": "[Fix #1580] Handle exceptions in linux process_memory_map",
                "url": "https://github.com/osquery/osquery/commit/3cc7984cc274cdc41cb34c78d9bd1394eaa152e7",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Missing dependencies."
                    ]
                }
            }
        ]
    },
    {
        "repo": "duckdb/duckdb",
        "commits": [
            {
                "no": 347,
                "msg": "Partially fix #10751: correctly catch exceptions in sqlite3_print_duckbox",
                "url": "https://github.com/duckdb/duckdb/commit/ea4fe47377e4b165708178daddfb6fd44e568fc5",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:246:27",
                        "callee": "[duckdb]::ErrorData::ErrorData",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        28,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:242:27",
                        "callee": "[duckdb]::ErrorData::ErrorData",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        28,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:249:35",
                        "callee": "[duckdb]::PreparedStatement::Execute",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        20,
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:250:21",
                        "callee": "[duckdb]::BaseQueryResult::HasError",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:252:42",
                        "callee": "[duckdb]::BaseQueryResult::GetErrorObject",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_6": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:258:82",
                        "callee": "[duckdb]::MaterializedQueryResult::RowCount",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        23,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_7": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:260:35",
                        "callee": "[duckdb]::MaterializedQueryResult::Collection",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        23,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_8": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:260:48",
                        "callee": "[duckdb]::ColumnDataCollection::GetRows",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_9": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:260:58",
                        "callee": "[duckdb]::ColumnDataRowCollection::GetValue",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        21,
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_10": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:261:20",
                        "callee": "[duckdb]::Value::IsNull",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_11": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:261:44",
                        "callee": "[duckdb]::Value::DefaultTryCastAs",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_12": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:263:44",
                        "callee": "[duckdb]::Value::GetValue",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        21,
                        22,
                        28
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_13": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:262:42",
                        "callee": "[duckdb]::Value::GetValue",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        21,
                        22,
                        28
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_14": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:283:15",
                        "callee": "[duckdb]::BoxRenderer::ToString",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        21,
                        24,
                        28
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_15": {
                    "Info": {
                        "caller": "duckdb_shell_sqlite3_print_duckbox",
                        "loc": "/home/gk/repos/10k/duckdb-copies/347/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:283:85",
                        "callee": "[duckdb]::MaterializedQueryResult::Collection",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        23,
                        24,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 348,
                "msg": "fix: catch exceptions thrown By Value(string) constructor",
                "url": "https://github.com/duckdb/duckdb/commit/81e5adbcbec265d87db42b1cf6912621f2e7cecb",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Needs -DJDBC_DRIVER=1 when running CMake, otherwise the file we want is not included in compilation."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1execute",
                        "loc": "/home/gk/repos/10k/duckdb-copies/348/tools/jdbc/src/jni/duckdb_java.cpp:493:29",
                        "callee": "[duckdb]::Value::Value",
                        "exception": "c:@N@duckdb@S@Exception"
                    },
                    "Context": [
                        19,
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "FreeCAD/FreeCAD",
        "commits": [
            {
                "no": 349,
                "msg": "Sketch: fixes #12480: Sketcher_CreateBSplineByInterpolation Unhandled unknown C++ exception\n\nThe interpolation of a BSpline can fail and then OCC throws an exception. Because this OCC exception isn't ...",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/fc8f93d4379fffb4b1f38e739e4ebd7620ece484",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Boost Python keeps trying to use python3.9, neglecting python3.12.",
                        "But libboost_python*.so's version is 3.12.",
                        "Currently I did 'mv /usr/local/bin/python3.9 /usr/local/bin/python3.9.bak' to fix it.",
                        "I have not figured out any better solution yet.",
                        "For all other commits of this repo, I generated compile_commands.json with python3.9 moved to python3.9.bak.",
                        "I don't know if any of the other commits can live with python3.9 in bin."
                    ]
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation does not have errors. Hopefully we will be able to analyze this commit.",
                        "cg-driver 'propagating exception' takes forever."
                    ]
                }
            },
            {
                "no": 350,
                "msg": "PD: Fix coverity issue:\n* CID 350645: Uncaught exception",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/55f8d68b4efe3a6c4c0e50478070db45b260838e",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has too many errors."
                    ]
                }
            },
            {
                "no": 351,
                "msg": "Fem: fix error: Unhandled Base::Exception caught in GUIApplication::notify",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/0239732e692672937d4cccbbf519756f5483b67c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has too many errors. Almost the same as 350."
                    ]
                }
            },
            {
                "no": 352,
                "msg": "Core: Fix several coverity issues:\n* CID 350582: Big parameter passed by value\n* CID 350639: Big parameter passed by value\n* CID 305234: Uncaught exception\n* CID 316529: Uncaught exception\n* CID 35059...",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/2dc78804b66af6c1098af174db851fd834a6d30b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has too many errors. Almost the same as 350."
                    ]
                }
            },
            {
                "no": 353,
                "msg": "PD: Fix several coverity issues:\n* CID 350558: Uninitialized pointer field\n* CID 350554: Uninitialized pointer field\n* CID 350589: Uninitialized pointer field\n* CID 350608: Uninitialized pointer field...",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/9ef2470799ff38610a15e7c43d5e02f38fe1fa67",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has too many errors. Almost the same as 350."
                    ]
                }
            },
            {
                "no": 354,
                "msg": "Part: Fix several coverity issues:\n* CID 350581: Structurally dead code\n* CID 350620: Structurally dead code\n* CID 350563: Big parameter passed by value\n* CID 350552: Uncaught exception\n* CID 305193: ...",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/edd346cc3dde8131036599a157c2092f7867da39",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has too many errors. Almost the same as 350."
                    ]
                }
            },
            {
                "no": 355,
                "msg": "Gui: fix several regressions in DlgSettingsColorGradientImp\n* make line edit fields wide enough to not truncate the text\n* fix error: Unhandled Base::Exception caught in GUIApplication::notify.",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/b2df95a66db430be89573abc80db70434d959424",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": []
                }
            },
            {
                "no": 356,
                "msg": "Gui: fixes DlgSettingsColorGradientImp:\n* handle exception in lambda function if max <= min\n* fix regression of 0938c98b6: a validator can be set to only one widget at a time",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/9b3a50840f39f038bfae8c7b41f76fef7017a96e",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has too many errors. Almost the same as 350."
                    ]
                }
            },
            {
                "no": 357,
                "msg": "fix scan coverity issues: uncaught exception",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/004324bbc5b3417b8f61799406a52e611c20991d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Requires BoostSignals, which is not in Boost1.83. Boost1.68 has it, but the CMake related files are missing."
                    ]
                }
            },
            {
                "no": 358,
                "msg": "Fix several coverity issues:\n* CID 350617: Dereference after null check\n* CID 350585: Out-of-bounds read\n* CID 350624: Resource leak\n* CID 332701: Uncaught exception\n* CID 350642: Uninitialized scalar...",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/68b92c504fbc973c8c897bddc428ac4bcb4b6ba8",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has too many errors. Almost the same as 350."
                    ]
                }
            },
            {
                "no": 359,
                "msg": "+ fixes #0001885: Unhandled exception when trying to enter edit-mode for objects while drawing view is active",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/ca5062cbfe53f87724cf9532867936e4988c2cd1",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 357."
                    ]
                }
            },
            {
                "no": 360,
                "msg": "register Quantity type for shiboken2, handle exception to fix abort when setting quantity property of InputField via Python",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/816336ce65d87c00599457aa18ed11beb6d748c9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 357."
                    ]
                }
            },
            {
                "no": 361,
                "msg": "Fix scan coverity issues:\nCID 184294: Uncaught exception\nCID 183597: Unchecked return value\nCID 175809: Dereference before null check\nCID 175810: Logically dead code\nCID 133000: Uninitialized scalar v...",
                "url": "https://github.com/FreeCAD/FreeCAD/commit/a7094210f8cb6ea63791bc91b5928a8097278367",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Requires Shiboken, but I can only install Shiboken2."
                    ]
                }
            }
        ]
    },
    {
        "repo": "xbmc/xbmc",
        "commits": [
            {
                "no": 362,
                "msg": "[addons] fix uncaught regex exception",
                "url": "https://github.com/xbmc/xbmc/commit/0bf5bfadba75cdb7e8dfce7248da9f57293117e1",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "cmake-normal -DX11_RENDER_SYSTEM=gl"
                    ]
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Compilation has too many errors. I tried my best to fix several, but there are still too many.",
                        "There are also Java errors."
                    ]
                }
            },
            {
                "no": 363,
                "msg": "[fix] fixes #12186. Fixed the missed exception catch of UnrarXLib within CFileRar.",
                "url": "https://github.com/xbmc/xbmc/commit/3204eb9922ef32f4c9d41e8f4ce5c17b292e1ab3",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Compilation has errors. There is bug resulting from misuse of libcdio which I cannot fix after trying my best."
                    ]
                }
            },
            {
                "no": 364,
                "msg": "[settings] catch formatting exception in CGUIControlSliderSetting::GetText() and fall back to default formatting labels (fixes #16663)",
                "url": "https://github.com/xbmc/xbmc/commit/a2ca3e92e2f4ea8e1e8a04e72f88faa616ff3a89",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Same as 362."
                    ]
                }
            },
            {
                "no": 365,
                "msg": "catch possible exception thrown by Dataset::exec in CDatabase::Connect (fixes #12281)",
                "url": "https://github.com/xbmc/xbmc/commit/86bc9dc83746901b8323299f23cd0d8681208b91",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 363."
                    ]
                }
            }
        ]
    },
    {
        "repo": "LizardByte/Sunshine",
        "commits": [
            {
                "no": 366,
                "msg": "Fix mismatched case and unhandled exception in open_drm_fd_for_cuda_device()",
                "url": "https://github.com/LizardByte/Sunshine/commit/9f94eebd32f148120389ebd3246829ee7e7bd66e",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "This file needs CUDA."
                    ]
                }
            }
        ]
    },
    {
        "repo": "RPCS3/rpcs3",
        "commits": [
            {
                "no": 367,
                "msg": "Handle exceptions at game list update\n\nShould fix #4056",
                "url": "https://github.com/RPCS3/rpcs3/commit/17ce5d91175769029708e2a60e3ef3ec0e18d101",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Fixed many compilation errors, mostly resulting from failing to #include Unix/Linux headers."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "game_list_frame::Refresh",
                        "loc": "/home/gk/repos/10k/rpcs3-copies/367/rpcs3/rpcs3qt/game_list_frame.cpp:438:22",
                        "callee": "[psf]::load_object",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "game_list_frame::Refresh",
                        "loc": "/home/gk/repos/10k/rpcs3-copies/367/rpcs3/rpcs3qt/game_list_frame.cpp:492:20",
                        "callee": "game_list_frame::PaintedPixmap",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "dogecoin/dogecoin",
        "commits": [
            {
                "no": 368,
                "msg": "Avoid ugly exception in log on unknown inv type\n\nIt is unexpected behavior for `ToString` to raise an exception. It\nis expected to do a best-effort attempt at formatting but never fail.\n\nCatch the exc...",
                "url": "https://github.com/dogecoin/dogecoin/commit/e9f25ddd0063f7ea65595178d04370d27344305c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 33 (1k-1.5k)."
                    ]
                }
            }
        ]
    },
    {
        "repo": "polybar/polybar",
        "commits": [
            {
                "no": 369,
                "msg": "fix: Catch inotify exceptions",
                "url": "https://github.com/polybar/polybar/commit/266705e016cb1b00ed69c71ae74d0e90f73015f3",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Links to the submodules are broken."
                    ]
                }
            },
            {
                "no": 370,
                "msg": "fix(timer_module): Catch warmup exceptions\n\nRefs #399",
                "url": "https://github.com/polybar/polybar/commit/6fa2d3943cc9e2bd36895c58f93bfd8b49dfec66",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Links to the submodules are broken.",
                        "Missing dependencies."
                    ]
                }
            }
        ]
    },
    {
        "repo": "ceph/ceph",
        "commits": [
            {
                "no": 371,
                "msg": "rgw/auth: do_aws4_auth_completion() catches exceptions\n\nAWSv4ComplMulti::complete() throws exceptions on errors, but nothing\ncatches these\n\nFixes: https://tracker.ceph.com/issues/64549\n\nSigned-off-by:...",
                "url": "https://github.com/ceph/ceph/commit/f953c419d6992c8124f3e123ae8030d6a45ffd1a",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 372,
                "msg": "rgw: catch manifest decode errors in GetObj/PutObj/CopyObj\n\nif we read an object that doesn't have a manifest attribute,\nRGWRados::get_obj_state_impl() adds an empty one and causes decode to\nthrow an ...",
                "url": "https://github.com/ceph/ceph/commit/77e0b9848cb458427b5dcf86d2c19769ea65e0bc",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 373,
                "msg": "mon: Resolve unhandled exception in\n__generate_command_map()\n\nIf improper json data is passed to rados, it can\nend up crashing the mon. This fix will catch the\nexception if thrown by __generate_comman...",
                "url": "https://github.com/ceph/ceph/commit/1109e62f6a3c0a7e06a088c4b833c8ecec51f791",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 374,
                "msg": "rgw : catch non int exception\n\nFixes: https://tracker.ceph.com/issues/48034\nSigned-off-by: caolei <halei15848934852@163.com>",
                "url": "https://github.com/ceph/ceph/commit/bfd20a5436548132d5db41f532deee249c5cc6b7",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 375,
                "msg": "mgr: fixes python error handling\n\nThe current `handle_pyerror` function implementation relies in the\n`traceback.format_exception_only` python function to format the\nexception object. The problem is th...",
                "url": "https://github.com/ceph/ceph/commit/072699d863e5586d72c166464998e523a51cb29d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 376,
                "msg": "ceph_authtool.cc: catch ceph::FailedAssertion exception\n\nFix for:\n\nCID 717141 (#1-19): Uncaught exception (UNCAUGHT_EXCEPT)\n root_function: In function main(int, char const **) an exception\n of type c...",
                "url": "https://github.com/ceph/ceph/commit/6fd2123b15716fb004a8c13f40ef048e963491b6",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "configure.ac is broken and I don't know how to fix it."
                    ]
                }
            },
            {
                "no": 377,
                "msg": "bench_log.cc: catch ceph::FailedAssertion exception\n\nFix for:\n\nCID 717177 (#2-1 of 3): Uncaught exception (UNCAUGHT_EXCEPT)\n root_function: In function main(int, char const **) an exception of\n type c...",
                "url": "https://github.com/ceph/ceph/commit/04517f0dc2f582a7abc05a2dceface80b98a1fbf",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 376."
                    ]
                }
            },
            {
                "no": 378,
                "msg": "tools/psim.cc: catch ceph::buffer::end_of_buffer exception\n\nFix for:\n\nCID 717163 (#1 of 1): Uncaught exception (UNCAUGHT_EXCEPT)\n root_function: In function main(int, char **) an exception of type\n ce...",
                "url": "https://github.com/ceph/ceph/commit/10fc8a24fcba822656b5679dd34b149c817d3101",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 376."
                    ]
                }
            },
            {
                "no": 379,
                "msg": "ceph_authtool.cc: catch ceph::buffer::end_of_buffer exception\n\nFix for:\n\nCID 717142 (#1 of 1): Uncaught exception (UNCAUGHT_EXCEPT)\n root_function: In function main(int, char const **) an exception\n o...",
                "url": "https://github.com/ceph/ceph/commit/fa986059b38ad03d9fb87b029780e3396ad6611e",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 376."
                    ]
                }
            },
            {
                "no": 380,
                "msg": "rgw: catch possible exception\n\nFix coverity issue 717168.\n\nSigned-off-by: Yehuda Sadeh <yehuda@inktank.com>",
                "url": "https://github.com/ceph/ceph/commit/79b15a26582b7f9ee4c2da97b718396b854a2dce",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "autogen.sh has errors which I don't know how to fix."
                    ]
                }
            },
            {
                "no": 381,
                "msg": "rgw: pool_iterate[_begin] catches NObjectIterator exceptions\n\nFixes: http://tracker.ceph.com/issues/37091\n\nSigned-off-by: Casey Bodley <cbodley@redhat.com>",
                "url": "https://github.com/ceph/ceph/commit/99cbdf522a8d13e2bbe37ee72d1c576833e2cd0b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 382,
                "msg": "osdc: self-managed snapshot helper should catch decode exception\n\nFixes: http://tracker.ceph.com/issues/24000\nSigned-off-by: Jason Dillaman <dillaman@redhat.com>",
                "url": "https://github.com/ceph/ceph/commit/43f7b17129ea8ab0a98f615ffc4d78ccad98309f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 383,
                "msg": "auth/cephx/CephxServiceHandler: handle decode errors\n\nDecode errors should trigger EPERM, not throw exceptions that trigger\ntimeouts/retries in the messenger.\n\nFixes: https://tracker.ceph.com/issues/4...",
                "url": "https://github.com/ceph/ceph/commit/4e8d745c594db18b4119ddf83047014917f437da",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 384,
                "msg": "rgw: do not abort when user passed bad parameters to set metadata\n\nFixes: #14190\n\nwhen user passes bad parameter(e.g. pass \"null\" to bool parameter), the ceph_json.cc::decode_json_obj()\nwill raise a e...",
                "url": "https://github.com/ceph/ceph/commit/83503239c81573232429a5fe98381f1a8f1357e9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            },
            {
                "no": 385,
                "msg": "rgw: do not abort when user passed bad parameters to set quota\n\nwhen user passes bad parameter(e.g. pass \"null\" to bool parameter), the ceph_json.cc::decode_json_obj()\nwill raise a exception with type...",
                "url": "https://github.com/ceph/ceph/commit/59f9058467480d21bd98e0e90aa97313a92478a1",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                }
            }
        ]
    },
    {
        "repo": "microsoft/onnxruntime",
        "commits": [
            {
                "no": 386,
                "msg": "Add catch-all exception handler to API_IMPL_END (#14194)\n\n### Description\r\nFairly self explanatory. Someone pointed out we could miss some\r\nexceptions, and we never want to throw exceptions through th...",
                "url": "https://github.com/microsoft/onnxruntime/commit/f8117b6f870e7623061d55f71574f2645984770f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Everything works fine. However, this commit simply adds a catch(...) to the definition of 'API_IMPL_END', which is applied at the end of every API function.",
                        "This commit is not about catching any specific exception, so we cannot analyze it."
                    ]
                }
            }
        ]
    },
    {
        "repo": "arangodb/arangodb",
        "commits": [
            {
                "no": 387,
                "msg": "try to fix \"caught exception during statistics processing: Expecting Object\" errors that may happen right after upgrading from 3.3",
                "url": "https://github.com/arangodb/arangodb/commit/bf8767773ff0ceb37496a293176259a84ce45e65",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "This commit is more of refactoring than fixing an exception.",
                        "It fixed an incorrect exception handling logic, not an exception."
                    ]
                }
            }
        ]
    },
    {
        "repo": "OpenRCT2/OpenRCT2",
        "commits": [
            {
                "no": 388,
                "msg": "Fix unhandled exceptions during packet processing",
                "url": "https://github.com/OpenRCT2/OpenRCT2/commit/6877b8214ac1a5ae5fdecd9f8410e433fc91ea38",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "I removed '-Werror' and fixed several real errors.",
                        "There is an indirect call."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "NetworkBase::ProcessPacket",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/388/src/openrct2/network/NetworkBase.cpp:1701:39",
                        "callee": "NetworkPacket::GetCommand",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "NetworkBase::ProcessPacket",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/388/src/openrct2/network/NetworkBase.cpp:1707:13",
                        "callee": "<Indirect Call>",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": true,
                        "has virtual keyword": "-",
                        "has direct throw": "-"
                    }
                }
            },
            {
                "no": 389,
                "msg": "Fix #9885. Catch exceptions in track design writing",
                "url": "https://github.com/OpenRCT2/OpenRCT2/commit/748a6338a9536873ecfb5f6999c28d5262062f1b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "I removed '-Werror' and fixed several real errors."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "T6Exporter::SaveTrack",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/389/src/openrct2/rct2/T6Exporter.cpp:36:15",
                        "callee": "FileStream::FileStream",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "T6Exporter::SaveTrack",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/389/src/openrct2/rct2/T6Exporter.cpp:37:12",
                        "callee": "T6Exporter::SaveTrack",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 390,
                "msg": "Fix #8841: Catch exceptions when loading parks from title editor (#8843)",
                "url": "https://github.com/OpenRCT2/OpenRCT2/commit/85c1ec8fa5a08d6cb86a76e457e35fb0969ee3b9",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "I removed '-Werror' and fixed several real errors."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "window_title_editor_mouseup",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/390/src/openrct2-ui/windows/TitleEditor.cpp:370:45",
                        "callee": "IParkImporter::LoadFromStream",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        24,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "window_title_editor_mouseup",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/390/src/openrct2-ui/windows/TitleEditor.cpp:371:27",
                        "callee": "IObjectManager::LoadObjects",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        18
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "window_title_editor_mouseup",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/390/src/openrct2-ui/windows/TitleEditor.cpp:372:31",
                        "callee": "IParkImporter::Import",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        20,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "window_title_editor_mouseup",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/390/src/openrct2-ui/windows/TitleEditor.cpp:375:21",
                        "callee": "scenario_begin",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        22,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "window_title_editor_mouseup",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/390/src/openrct2-ui/windows/TitleEditor.cpp:377:21",
                        "callee": "game_load_init",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        22,
                        26
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_6": {
                    "Info": {
                        "caller": "window_title_editor_mouseup",
                        "loc": "/home/gk/repos/10k/OpenRCT2-copies/390/src/openrct2-ui/windows/TitleEditor.cpp:380:17",
                        "callee": "window_title_editor_open",
                        "exception": "c:@N@std@S@exception"
                    },
                    "Context": [
                        22
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 391,
                "msg": "Fix #3899: Game crashes after hosting my server\n\nCatch exceptions when loading groups.json.",
                "url": "https://github.com/OpenRCT2/OpenRCT2/commit/f3786b3130d3178d9851018c28e09ca73450c47e",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "Several headers like SDL2/_real_SDL_config.h missing."
                    ]
                }
            }
        ]
    },
    {
        "repo": "scylladb/scylladb",
        "commits": [
            {
                "no": 392,
                "msg": "raft topology: handle abort exceptions from sleeping in fence_previous_coordinator\n\nThe fence_previous_coordinator function has a retry loop: if it fails to\nperform a group0 operation, it will try aga...",
                "url": "https://github.com/scylladb/scylladb/commit/1408b7cfa8d30760c36ab70467be4f6f330ef855",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 393,
                "msg": "commitlog_test::test_commitlog_reader: handle segment_truncation\n\nFixes #16312\n\nThis test replays a segment before it might be closed or even fully flushed,\nthus it can (with the new semantics) genera...",
                "url": "https://github.com/scylladb/scylladb/commit/b34366957e2722ecb696eb32237def14d1fd373b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 394,
                "msg": "utils: config_file: throw bpo::invalid_option_value() when seeing invalid option\n\nbefore this change, `std::invalid_argument` is thrown by\n`bpo::notify(configuration)` in `app_template::run_deprecated...",
                "url": "https://github.com/scylladb/scylladb/commit/c1beba1f7d543ae7ccef4acc9e9c3707e72a257f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "submodule-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 395,
                "msg": "readers/multishard: evictable_reader::fast_forward_to(): close reader on exception\n\nWhen the reader is currently paused, it is resumed, fast-forwarded, then\npaused again. The fast forwarding part can ...",
                "url": "https://github.com/scylladb/scylladb/commit/204d3284facf5ad626a9c51161efe76306a630af",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "cmake-failed",
                        "submodule-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 396,
                "msg": "tools/scylla-sstable: load_sstables: handle load errors\n\nCurrently, exceptions thrown from `sst->load` are unhandled,\nresulting in, e.g.:\n```\nERROR 2023-09-12 08:02:58,124 [shard 0:main] seastar - Exi...",
                "url": "https://github.com/scylladb/scylladb/commit/a5a22fe5b726060b7bb99dff948184bf56b394d7",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "submodule-failed",
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 397,
                "msg": "Make shutdown clean when stopping sstable reshard\n\nAfter aa7cdc039248f001a5c, run_custom_job() propagates stop exception.\nThe problem is that we fail to handle stop exception in the procedure\nwhich st...",
                "url": "https://github.com/scylladb/scylladb/commit/3263c1d5f1df2f23246e1c7ba466b04282c5322d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "submodule-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 398,
                "msg": "test: perf: perf_fast_forward: fix an error message\n\nThe test is supposed to give a helpful error message when the user forgets to\nrun --populate before the benchmark. But this must have become broken...",
                "url": "https://github.com/scylladb/scylladb/commit/78850884d22fc4f84a13c683f2eaacc6a0e6b3bf",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "submodule-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 399,
                "msg": "cdc: Handle sleep-aborted exception on stop\n\nWhen update_streams_description() fails it spawns a fiber and retries\nthe update in the background once every 60s. If the sleeping between\nattempts is abor...",
                "url": "https://github.com/scylladb/scylladb/commit/cf0f912e599df085f8e7113f2c3ee5a8db9bfacb",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "submodule-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 400,
                "msg": "log: Fix operator<<(std::ostream&, const std::exception_ptr&)\n\nAttempt to print std::nested_exception currently results in exception\nto leak outside the printer. Fix by capturing all exception in the\n...",
                "url": "https://github.com/scylladb/scylladb/commit/838a038cbdce8b6ea503e1b7b1954efafa7fc752",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "unknown",
                        "unknown"
                    ]
                }
            },
            {
                "no": 401,
                "msg": "main: handle exceptions during startup\n\nIf we don't, std::terminate() causes a core dump, even though an\nexception is sort-of-expected here and can be handled.\n\nAdd an exception handler to fix.\n\nFixes...",
                "url": "https://github.com/scylladb/scylladb/commit/5af22f6cb1b186cf8ffdf18992e66cc4fd9ebcd2",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "unknown",
                        "submodule-failed",
                        "unknown"
                    ]
                }
            },
            {
                "no": 402,
                "msg": "distributed_loader: fix old format counters exception\n\ntable::load_sstable: fix missing arg in old format counters exception\n\nProperly catch and log the exception in load_new_sstables.\nAbort when the ...",
                "url": "https://github.com/scylladb/scylladb/commit/1021eb29c9ff60ec6cd65afdb682a90fd86318bd",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 403,
                "msg": "main: Fix broadcast_address and listen_address validation errors\n\nFix the validation error message to look like this:\n\n  Scylla version 666.development-20160316.49af399 starting ...\n  WARN  2016-03-17...",
                "url": "https://github.com/scylladb/scylladb/commit/69dacf90636c4801cb725e292f7c65837695b064",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "unknown",
                        "submodule-failed",
                        "unknown"
                    ]
                }
            },
            {
                "no": 404,
                "msg": "table: snapshot: handle errors\n\nTurn table::snapshot into a coroutine,\ncatch exceptions, and return them to the caller.\n\nMake sure that coordination across shards\nwould not break even if any of the sh...",
                "url": "https://github.com/scylladb/scylladb/commit/1d39d803affd3c6e49d2319ef1591d2d79ac188f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed",
                        "submodule-failed",
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 405,
                "msg": "storage_proxy: log all exceptions thrown in the mutation verb handler flow\n\nCatch and log the exceptions thrown in the mutation receiver flow for better\ndebugability.\n\nSigned-off-by: Vlad Zolotarov <v...",
                "url": "https://github.com/scylladb/scylladb/commit/eafa4910097e1ad230cfb420805cf2e2fa036039",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "unknown"
                    ]
                }
            },
            {
                "no": 406,
                "msg": "alternator: fix second boot\n\nAmazingly, it appears we never tested booting Alternator a second time :-)\n\nOur initialization code creates a new keyspace, and was supposed to ignore\nthe error if this ke...",
                "url": "https://github.com/scylladb/scylladb/commit/d1a5512a3559cd084a1c6d7a902d32b47f6b9cfa",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 407,
                "msg": "reader_concurrency_semaphore: make signal() noexcept\n\nCurrently reader_concurrency_semaphore::signal() can fail. This is\ndangerous in two ways:\n* It is called from constructors, so the exception can b...",
                "url": "https://github.com/scylladb/scylladb/commit/05116ba96395ff0ffaeab0ca1ce2b9f8de9dfc87",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 408,
                "msg": "storage_proxy_stats: Make get_ep_stat() noexcept\n\nThe .get_ep_stat(ep) call can throw when registering metrics (we have\nissue for it, #5697). This is not expected by it callers, in particular\nabstract...",
                "url": "https://github.com/scylladb/scylladb/commit/513ce1e6a5c3e0c3a7187bc8eb4a7df86d1e1cfb",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "cmake-failed"
                    ]
                }
            },
            {
                "no": 409,
                "msg": "db: Fix error handling in populate_keyspace()\n\nWhen find_uuid() fails Scylla would terminate with:\n\n  Exiting on unhandled exception of type 'std::out_of_range': _Map_base::at\n\nBut we are supposed to ...",
                "url": "https://github.com/scylladb/scylladb/commit/d3b7e143dcb3f58111eb2c83cf84cb55ee5a687f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "submodule-failed",
                        "unknown"
                    ]
                }
            }
        ]
    },
    {
        "repo": "mobile-shell/mosh",
        "commits": [
            {
                "no": 410,
                "msg": "Coverity fixes:  uncaught exceptions",
                "url": "https://github.com/mobile-shell/mosh/commit/c027112a88368221c335749a8791f8a4a468f809",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "The files to analyze are in src/tests and the callers are 'main'.",
                        "I renamed the 'main' functions so that they can be distinguished.",
                        "Moreover, extra steps are needed to have these files included in compile_commands.json (as well as compilation and analysis)."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "main_base64dotcc",
                        "loc": "base64.cc:138:3",
                        "callee": "test_base64",
                        "exception": "std::exception (New!)"
                    },
                    "Context": [
                        23
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "main_ocb_aesdotcc",
                        "loc": "ocb-aes.cc:547:3",
                        "callee": "test_all_vectors",
                        "exception": "std::exception (New!)"
                    },
                    "Context": [
                        23
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "main_ocb_aesdotcc",
                        "loc": "ocb-aes.cc:548:3",
                        "callee": "test_iterative",
                        "exception": "std::exception (New!)"
                    },
                    "Context": [
                        23
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "doitsujin/dxvk",
        "commits": [
            {
                "no": 411,
                "msg": "[dxgi] Catch exception when instance creation fails\n\nFixes #810.",
                "url": "https://github.com/doitsujin/dxvk/commit/64aefcc2a14627105b36ab53314b7818fa9560bc",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Maybe special. It uses x86_64-w64-mingw32-gcc/g++."
                    ]
                }
            }
        ]
    },
    {
        "repo": "blender/blender",
        "commits": [
            {
                "no": 412,
                "msg": "Fix: Proper error handling for STL, PLY, and OBJ IO\n\nProperly handle exceptions from STL and PLY code to prevent crashes on\ninvalid file paths.\n\nThis will now also Report errors/warnings to the caller...",
                "url": "https://github.com/blender/blender/commit/5d9e127234ed98d9f74b001bf53ffe27453ea86b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Run cmake with -DPYTHON_VERSION=3.12. Note that 3.11 is the only officially supported version. I don't know if there will be any problems."
                    ]
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "[blender]::[io]::[ply]::exporter_main",
                        "loc": "/home/gk/repos/10k/blender-copies/412/source/blender/io/ply/exporter/ply_export.cc:36:14",
                        "callee": "[std]::make_unique",
                        "exception": "c:@N@std@S@system_error"
                    },
                    "Context": [
                        28,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "[blender]::[io]::[ply]::exporter_main",
                        "loc": "/home/gk/repos/10k/blender-copies/412/source/blender/io/ply/exporter/ply_export.cc:39:14",
                        "callee": "[std]::make_unique",
                        "exception": "c:@N@std@S@system_error"
                    },
                    "Context": [
                        28,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "[blender]::[io]::[stl]::export_frame",
                        "loc": "/home/gk/repos/10k/blender-copies/412/source/blender/io/stl/exporter/stl_export.cc:43:14",
                        "callee": "[std]::make_unique",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        13,
                        15,
                        28,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "[blender]::[io]::[stl]::export_frame",
                        "loc": "/home/gk/repos/10k/blender-copies/412/source/blender/io/stl/exporter/stl_export.cc:73:16",
                        "callee": "[std]::make_unique",
                        "exception": "c:@N@std@S@runtime_error"
                    },
                    "Context": [
                        13,
                        15,
                        28,
                        30
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 413,
                "msg": "Fix #107932: crash attempting to load invalid OpenVDB file path on macOS\n\nAdd catch all exceptions similar as was done for OpenEXR in #107184, and\nalso properly handle errors in Hydra delegate.",
                "url": "https://github.com/blender/blender/commit/9419f5a2895fe44c570bdecf63a99570ac21d5b7",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Same as 412."
                    ]
                },
                "analysis": {
                    "successful": false,
                    "notes": [
                        "The files to analyze are in intern/cycles/hydra, which are not included in compilation unless OpenUSD is installed.",
                        "I tried to build OpenUSD from source. Source is at /home/gk/Libraries/Sources/OpenUSD-25.05 and generated files during build are at /usr/local/OpenUSD.",
                        "There is a linkage error when building OpenUSD and linking against TBB.",
                        "I tried to add '-ltbb' to the related makefile scripts, but it did not work."
                    ]
                }
            },
            {
                "no": 414,
                "msg": "Fix #106977: Crash when OpenEXR IO fails\n\nThe crash can occur in the following situations:\n\n- Attempt to open a corrupted EXR file\n- Attempt to save an EXR file under a non-existing directory.\n\nThe ro...",
                "url": "https://github.com/blender/blender/commit/b2c822065c0f1f4671c0a471b5718123e83f57ca",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Same as 412."
                    ]
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Fixed many compilation errors."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "imb_save_openexr_half",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:555:10",
                        "callee": "[Imf_3_1]::OutputFile::writePixels",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "imb_save_openexr_half",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:497:16",
                        "callee": "[Imf_3_1]::OutputFile::OutputFile",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "imb_save_openexr_float",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:603:16",
                        "callee": "[Imf_3_1]::OutputFile::OutputFile",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_4": {
                    "Info": {
                        "caller": "imb_save_openexr_float",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:632:10",
                        "callee": "[Imf_3_1]::OutputFile::writePixels",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_5": {
                    "Info": {
                        "caller": "IMB_exr_begin_write",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:931:23",
                        "callee": "[Imf_3_1]::OutputFile::OutputFile",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_6": {
                    "Info": {
                        "caller": "IMB_exrtile_begin_write",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:1000:25",
                        "callee": "[Imf_3_1]::MultiPartOutputFile::MultiPartOutputFile",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_7": {
                    "Info": {
                        "caller": "IMB_exr_begin_read",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:1025:23",
                        "callee": "[Imf_3_1]::MultiPartInputFile::MultiPartInputFile",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_8": {
                    "Info": {
                        "caller": "IMB_exr_write_channels",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:1197:20",
                        "callee": "[Imf_3_1]::OutputFile::writePixels",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_9": {
                    "Info": {
                        "caller": "IMB_exrtile_write_channels",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:1256:9",
                        "callee": "[Imf_3_1]::TiledOutputPart::writeTile",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_10": {
                    "Info": {
                        "caller": "IMB_exr_read_channels",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:1333:10",
                        "callee": "[Imf_3_1]::InputPart::readPixels",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_11": {
                    "Info": {
                        "caller": "imb_load_openexr",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:2089:14",
                        "callee": "[Imf_3_1]::InputPart::readPixels",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_12": {
                    "Info": {
                        "caller": "imb_load_openexr",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:2087:21",
                        "callee": "[Imf_3_1]::InputPart::InputPart",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_13": {
                    "Info": {
                        "caller": "imb_load_openexr",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:1978:16",
                        "callee": "[Imf_3_1]::MultiPartInputFile::MultiPartInputFile",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_14": {
                    "Info": {
                        "caller": "imb_load_filepath_thumbnail_openexr",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:2183:16",
                        "callee": "[Imf_3_1]::RgbaInputFile::RgbaInputFile",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_15": {
                    "Info": {
                        "caller": "imb_load_filepath_thumbnail_openexr",
                        "loc": "/home/gk/repos/10k/blender-copies/414/source/blender/imbuf/intern/openexr/openexr_api.cpp:2228:13",
                        "callee": "[Imf_3_1]::RgbaInputFile::readPixels",
                        "exception": "..."
                    },
                    "Context": [
                        1,
                        32
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": false,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 415,
                "msg": "OpenVDB: Fix IOError in try catch statement\n\nBroader exception handling for OpenVDB IO errors.",
                "url": "https://github.com/blender/blender/commit/1bb702df1e1678b83a7238af2a28ecb73b4fb069",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 412.",
                        "Some dependency problem. Maybe I can fix it later."
                    ]
                }
            },
            {
                "no": 416,
                "msg": "Fix for an unhandled exception. Campbell: please include in 2.60a.",
                "url": "https://github.com/blender/blender/commit/726fa618172733f3c4dc5ee85642829400e68f7b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 415."
                    ]
                }
            },
            {
                "no": 417,
                "msg": "Fix T78758 Alembic export: crash when file is in use by another application\n\nIn cases when the output file cannot be opened, an exception is thrown that\nwas not caught.",
                "url": "https://github.com/blender/blender/commit/e8483f9bd721f93ec8c21fb339a518096042537d",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Requires libembree3, but 4 is installed."
                    ]
                }
            }
        ]
    },
    {
        "repo": "EOSIO/eos",
        "commits": [
            {
                "no": 418,
                "msg": "fix uncaught exception",
                "url": "https://github.com/EOSIO/eos/commit/f4cb5c8ed97c83c4bd658f8b56e5ce3b6f2e5aa2",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Requires LLVM version in [7, 10]."
                    ]
                }
            },
            {
                "no": 419,
                "msg": "Potential Fix #3458 - uncaught exceptions",
                "url": "https://github.com/EOSIO/eos/commit/cd2c29fbc49f366d47f2f212951e5c32cbdc0ee3",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Requires BoostSignals."
                    ]
                }
            }
        ]
    },
    {
        "repo": "PCSX2/pcsx2",
        "commits": [
            {
                "no": 420,
                "msg": "CDVD: Fix possible uncaught exception in CheckDiskTypeFS",
                "url": "https://github.com/PCSX2/pcsx2/commit/97b94acd866385fe79d700c1532539cc160ef9f3",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Fixed many compilation errors, mostly resulting from misuse of fmt."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "CheckDiskTypeFS",
                        "loc": "/home/gk/repos/10k/pcsx2-copies/420/pcsx2/CDVD/CDVDaccess.cpp:80:15",
                        "callee": "IsoDirectory::IsoDirectory",
                        "exception": "c:@N@Exception@S@FileNotFound"
                    },
                    "Context": [
                        8
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    },
    {
        "repo": "sonic-pi-net/sonic-pi",
        "commits": [
            {
                "no": 421,
                "msg": "Midi Fix\n\nCatch potential exceptions from RtMidi in the constructors",
                "url": "https://github.com/sonic-pi-net/sonic-pi/commit/7f8cffb53448b60a058ce700186bf4e5ecf2604b",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Fixed some bugs, including 'ln -s /usr/lib/x86_64-linux-gnu/libaubio.so /usr/lib/x86_64-linux-gnu/libaubio.so.1'.",
                        "But note that there is already a 'libaubio.so.5' in /usr/lib/x86_64-linux-gnu. I don't know if this will cause any problems.",
                        "cd app && ./linux-prebuild.sh && ./linux-config.sh",
                        "compile_commands.json is in app/build"
                    ]
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "The files to analyze are in external/sp_midi. The 'external' targets are not included in compilation by default.",
                        "Normally it needs to be built by executing 'external/linux_build_externals.sh'.",
                        "However, the script is stuck at obtaining ERLANG_INCLUDE_PATH from 'erl -noinput -eval <blablabla>'.",
                        "I simply hardcoded that path with /usr/lib/erlang/erts-13.2.2.5/include.",
                        "The rest part of the script just runs cmake in the external directory.",
                        "I ran it manually so that I could set the compilers and export compile_commands.json.",
                        "compile_commands.json is in app/external/build.",
                        "cg-driver reported errors from files in /usr/share/cmake-3.28/...., which I'm sure has nothing to do with the files we care about."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "MidiIn::MidiIn",
                        "loc": "/home/gk/repos/10k/sonic-pi-copies/421/app/external/sp_midi/src/midiin.cpp:41:19",
                        "callee": "RtMidiIn::openPort",
                        "exception": "c:@S@RtMidiError"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "MidiOut::MidiOut",
                        "loc": "/home/gk/repos/10k/sonic-pi-copies/421/app/external/sp_midi/src/midiout.cpp:39:16",
                        "callee": "RtMidiOut::openPort",
                        "exception": "c:@S@RtMidiError"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 422,
                "msg": "Midi Fix\n\nCatch potential exceptions from RtMidi in the constructors",
                "url": "https://github.com/sonic-pi-net/sonic-pi/commit/2452814e632b3193d7699dc838cf639d06645ec3",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": [
                        "Same as 421."
                    ]
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Completely the same as 421."
                    ]
                }
            },
            {
                "no": 423,
                "msg": "Midi Fix\n\nCatch potential exceptions from RtMidi in the constructors",
                "url": "https://github.com/sonic-pi-net/sonic-pi/commit/0451a6e9c45302b0c3d71d405df06edb6afb4de2",
                "compile_commands_generation": {
                    "done": true,
                    "successful": false,
                    "notes": [
                        "Same as 421."
                    ]
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Completely the same as 421."
                    ]
                }
            }
        ]
    },
    {
        "repo": "xournalpp/xournalpp",
        "commits": [
            {
                "no": 424,
                "msg": "Handle boost filesystem exception\n\nfixes #411",
                "url": "https://github.com/xournalpp/xournalpp/commit/fed9986dbcfa6c128275225c8e210738a11d419f",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true
                },
                "fix_1": {
                    "Info": {
                        "caller": "Control::renameLastAutosaveFile",
                        "loc": "/home/gk/repos/10k/xournalpp-copies/424/src/control/Control.cpp:216:4",
                        "callee": "[boost]::[filesystem]::remove",
                        "exception": "c:@N@boost@N@filesystem@S@filesystem_error"
                    },
                    "Context": [
                        25
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_2": {
                    "Info": {
                        "caller": "Control::renameLastAutosaveFile",
                        "loc": "/home/gk/repos/10k/xournalpp-copies/424/src/control/Control.cpp:219:4",
                        "callee": "[boost]::[filesystem]::remove",
                        "exception": "c:@N@boost@N@filesystem@S@filesystem_error"
                    },
                    "Context": [
                        25
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                },
                "fix_3": {
                    "Info": {
                        "caller": "Control::renameLastAutosaveFile",
                        "loc": "/home/gk/repos/10k/xournalpp-copies/424/src/control/Control.cpp:211:4",
                        "callee": "[boost]::[filesystem]::remove",
                        "exception": "c:@N@boost@N@filesystem@S@filesystem_error"
                    },
                    "Context": [
                        25
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            },
            {
                "no": 425,
                "msg": "Fix two GUI bugs with uncaught exceptions\n\nCloses #263, #219, #190 and potentially #229",
                "url": "https://github.com/xournalpp/xournalpp/commit/acec19922b17837dc84f549b97a30fa2bf5e529c",
                "compile_commands_generation": {
                    "done": true,
                    "successful": true,
                    "notes": []
                },
                "analysis": {
                    "successful": true,
                    "notes": [
                        "Changed language standard to C++17, otherwise some libraries cannot be compiled.",
                        "It seems that src/pdf is being refactored and has a lot of errors like passing raw pointers to unique_ptr, misusing const/reference/rvalue-reference, misusing std::optional, etc.",
                        "The only compile-errors are from some files in src/pdf, which I bet has nothing to do with the files we care about.",
                        "So I ran cg-driver with --no-strict."
                    ]
                },
                "fix_1": {
                    "Info": {
                        "caller": "RecentManager::filterRecent",
                        "loc": "/home/gk/repos/10k/xournalpp-copies/425/src/control/RecentManager.cpp:183:15",
                        "callee": "[boost]::[filesystem]::path::path",
                        "exception": "c:@N@boost@N@filesystem@S@filesystem_error"
                    },
                    "Context": [
                        33
                    ],
                    "Caller": {
                        "is noexcept": false,
                        "has direct caller": true,
                        "has indirect caller": "true/false"
                    },
                    "Callee": {
                        "is indirect call": false,
                        "has virtual keyword": "true/false",
                        "has direct throw": "true/false"
                    }
                }
            }
        ]
    }
]