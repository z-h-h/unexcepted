#!/usr/bin/env python3

import os

from client import Client


def accept_msg(msg):
    if msg.startswith('Merge') or msg.startswith('Squashed') or msg.startswith('Branch'):
        return False
    # handle/handled/unhandled/catch/caught/uncaught
    msg = msg.lower()
    if 'handle' in msg or 'catch' in msg or 'caught' in msg:
        return True
    return False


def accept_files(files):
    for file in files:
        ext = os.path.splitext(file)[1]
        if ext not in ['.h', '.hh', '.hpp', '.c', '.cc', '.cp', '.cxx', '.cpp', '.c++']:
            return False
    return True


def search_commits(client, stars, output):
    repos = client.search_repos(
        language='c++', stars=stars, sort='stars')
    commits = client.search_commits_2(
        'fix exception', repos, accept_msg=accept_msg, accept_files=accept_files)
    Client.dump_commits(commits, output)


if __name__ == '__main__':

    client = Client('your github token')

    # >10k
    search_commits(client, '>10000', 'temp/allfiles/fix_exception_10k.json')

    # 5k~10k
    search_commits(client, '5000..10000',
                   'temp/allfiles/fix_exception_5k_10k.json')

    # 3k~5k
    search_commits(client, '3000..5000',
                   'temp/allfiles/fix_exception_3k_5k.json')

    # 2k~3k
    search_commits(client, '2000..3000',
                   'temp/allfiles/fix_exception_2k_3k.json')

    # 1.5k~2k
    search_commits(client, '1500..2000',
                   'temp/allfiles/fix_exception_1.5k_2k.json')

    # 1k~1.5k
    search_commits(client, '1000..1500',
                   'temp/allfiles/fix_exception_1k_1.5k.json')
